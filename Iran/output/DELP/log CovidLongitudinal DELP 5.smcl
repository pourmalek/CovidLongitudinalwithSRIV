{smcl}
{com}{sf}{ul off}{txt}{.-}
      name:  {res}<unnamed>
       {txt}log:  {res}/Users/farshadpourmalek/Downloads/CovidLongitudinal-main/Iran/code/DELP/log CovidLongitudinal DELP 5.smcl
  {txt}log type:  {res}smcl
 {txt}opened on:  {res}16 May 2022, 12:01:08
{txt}
{com}. 
. ***************************************************************************
. * This is "do CovidLongitudinal DELP 5.do"
. 
. * Project: Longitudinal assessment of C19 models                                                                         
. * Person: Farshad Pourmalek pourmalek_farshad at yahoo dotcom
. ***************************************************************************
. 
. 
. * run calculations - daily deaths: four error types (graphs 3 to 11), updates together
. 
. * graph 3 Error
. * graph 4 Absolute Error
. * graph 5 Percent Error
. * graph 6 Absolute Percent Error
. 
. * graph 7 mean over updates of median error by calendar months
. * graph 8 Daily deaths, mean over updates of median absolute error by calendar months
. * graph 9 Daily deaths, mean over updates of median % error by calendar months
. * graph 10 Daily deaths, mean over updates of median absolute % error by calendar months
. * (7, 8, 9, 10) (a, b); a = not smoothed, b = smoothed for better viewing
. 
. * graph 11 Daily deaths, provinces together, Avergae of MAPE over updates and calendar months
. 
. * input data files: "CovidLongitudinal DELP.dta"
. * output data files: "CovidLongitudinal DELP 2.dta" (with error measures saved)
. 
. 
. 
. 
. 
. *********************
. 
. /*
> 
> 
> CALCULATIONS:
> 
> Error = minus (Reference minus Model) 
> 
> Absolute error = | minus (Reference minus Model) |
> 
> Percent error = 100 * (minus (Reference minus Model)) / Reference
> 
> Absolute percent error = 100 * | minus (Reference minus Model) | / Reference
> 
> 
> 
> 
> Error = - (Reference - Model)
> 
> Absolute error = | - (Reference - Model) |
> 
> Percent error = 100 * (- (Reference - Model)) / Reference
> 
> Absolute percent error = 100 * | - (Reference - Model)| / Reference
> 
> */
. 
. 
. 
. 
. use "CovidLongitudinal DELP.dta", clear 
{txt}
{com}. 
. 
. 
. 
. * gen months time bin
. 
. 
. gen month = month(date)
{txt}
{com}. 
. gen monthstr = ""
{txt}(732 missing values generated)

{com}. replace monthstr = "01" if month == 1
{txt}variable {bf}monthstr{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str2{sf}
{txt}(63 real changes made)

{com}. replace monthstr = "02" if month == 2
{txt}(57 real changes made)

{com}. replace monthstr = "03" if month == 3
{txt}(62 real changes made)

{com}. 
. replace monthstr = "04" if month == 4
{txt}(60 real changes made)

{com}. replace monthstr = "05" if month == 5
{txt}(62 real changes made)

{com}. replace monthstr = "06" if month == 6
{txt}(60 real changes made)

{com}. 
. replace monthstr = "07" if month == 7
{txt}(62 real changes made)

{com}. replace monthstr = "08" if month == 8
{txt}(62 real changes made)

{com}. replace monthstr = "09" if month == 9
{txt}(60 real changes made)

{com}. 
. replace monthstr = "10" if month == 10
{txt}(62 real changes made)

{com}. replace monthstr = "11" if month == 11
{txt}(60 real changes made)

{com}. replace monthstr = "12" if month == 12
{txt}(62 real changes made)

{com}. 
. 
. 
. gen year = year(date)
{txt}
{com}. 
. gen yearstr = ""
{txt}(732 missing values generated)

{com}. replace yearstr = "2020" if year == 2020
{txt}variable {bf}yearstr{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str4{sf}
{txt}(366 real changes made)

{com}. replace yearstr = "2021" if year == 2021
{txt}(365 real changes made)

{com}. replace yearstr = "2022" if year == 2022
{txt}(1 real change made)

{com}. 
. 
. 
. egen yearmonth = concat(yearstr monthstr), p(m)
{txt}
{com}. 
. replace yearmonth = "" if yearmonth == "2022m01"
{txt}(1 real change made)

{com}. 
. sort provincestate date yearmonth 
{txt}
{com}. 
. isid date
{txt}
{com}. 
. *
. 
. 
. 
. 
. 
. local list ///
> 20200417 ///
> 20200424 ///
> 20200501 ///
> 20200509 ///
> 20200517 ///
> 20200524 ///
> 20200531 ///
> 20200607 ///
> 20200614 ///
> 20200621 ///
> 20200628 ///
> 20200704 ///
> 20200718 ///
> 20200723 ///
> 20200801 ///
> 20200815 ///
> 20200829 ///
> 20200912 ///
> 20200926 ///
> 20201008 ///
> 20201022 ///
> 20201105 ///
> 20201119 ///
> 20201119 ///
> 20201203 ///
> 20201217 ///
> 20201231 ///
> 20210114 ///
> 20210128 ///
> 20210211 ///
> 20210225 ///
> 20210311 ///
> 20210325 ///
> 20210408 ///
> 20210422 ///
> 20210506 ///
> 20210520 ///
> 20210603 ///
> 20210610 ///
> 20210617 ///
> 20210624 ///
> 20210701 ///
> 20210708 ///
> 20210715 ///
> 20210722 ///
> 20210729 ///
> 20210805 ///
> 20210812 ///
> 20210819 ///
> 20210826 ///
> 20210902 ///
> 20210909 ///
> 20210916 ///
> 20210923 ///
> 20210930 ///
> 20211007 ///
> 20211014 ///
> 20211021 ///
> 20211028 ///
> 20211104 ///
> 20211111 ///
> 20211118 ///
> 20211125 ///
> 20211202 ///
> 20211209 ///
> 20211216 ///
> 20211223 ///
> 20211230 
{txt}
{com}. 
. 
. 
. sort provincestate date
{txt}
{com}. 
. 
. * (1) gen error TYPES by calendar months and model updates
. 
. foreach update of local list {c -(}
{txt}  2{com}. 
.         * Running not quietly displays that the Stata is working and has not frozen. 
. 
. capture drop DDErrorA01`update'
{txt}  3{com}. gen DDErrorA01`update' = - (DayDeaMeSmA00 - DayDeaFOREA01`update')
{txt}  4{com}. label var DDErrorA01`update' "DayDeaFOREA01`update' error"
{txt}  5{com}. qui replace DDErrorA01`update' = . if DayDeaMeSmA00 == . // before location was added to the estimates for the country
{txt}  6{com}. qui replace DDErrorA01`update' = . if date == td(01jan2022) // 01jan2022 is not included in this study
{txt}  7{com}. qui replace DDErrorA01`update' = . if date < td(17Apr2020) // 17Apr2020 is the earliest date of DELP forecasts for Iran
{txt}  8{com}. 
. capture drop DDAbsErrA01`update'
{txt}  9{com}. gen DDAbsErrA01`update' = abs(- (DayDeaMeSmA00 - DayDeaFOREA01`update'))
{txt} 10{com}. label var DDAbsErrA01`update' "DayDeaFOREA01`update' absolute error"
{txt} 11{com}. qui replace DDAbsErrA01`update' = . if DayDeaMeSmA00 == . // before location was added to the estimates for the country
{txt} 12{com}. qui replace DDAbsErrA01`update' = . if date == td(01jan2022) // 01jan2022 is not included in this study
{txt} 13{com}. qui replace DDAbsErrA01`update' = . if date < td(17Apr2020) // 17Apr2020 is the earliest date of DELP forecasts for Iran
{txt} 14{com}. 
. capture drop DDPerErrA01`update'
{txt} 15{com}. gen DDPerErrA01`update' = (100 * (- (DayDeaMeSmA00 - DayDeaFOREA01`update'))) / DayDeaMeSmA00
{txt} 16{com}. label var DDPerErrA01`update' "DayDeaFOREA01`update' percent error"
{txt} 17{com}. qui replace DDPerErrA01`update' = . if DayDeaMeSmA00 == . // before location was added to the estimates for the country
{txt} 18{com}. qui replace DDPerErrA01`update' = . if date == td(01jan2022) // 01jan2022 is not included in this study
{txt} 19{com}. qui replace DDPerErrA01`update' = . if date < td(17Apr2020) // 17Apr2020 is the earliest date of DELP forecasts for Iran
{txt} 20{com}. 
. capture drop DDAbPeErA01`update'
{txt} 21{com}. gen DDAbPeErA01`update' = (100 * abs(- (DayDeaMeSmA00 - DayDeaFOREA01`update'))) / DayDeaMeSmA00
{txt} 22{com}. label var DDAbPeErA01`update' "DayDeaFOREA01`update' absolute percent error" 
{txt} 23{com}. qui replace DDAbPeErA01`update' = . if DayDeaMeSmA00 == . // before location was added to the estimates for the country
{txt} 24{com}. qui replace DDAbPeErA01`update' = . if date == td(01jan2022) // 01jan2022 is not included in this study
{txt} 25{com}. qui replace DDAbPeErA01`update' = . if date < td(17Apr2020) // 17Apr2020 is the earliest date of DELP forecasts for Iran
{txt} 26{com}. 
. {c )-}
{txt}(672 missing values generated)
(672 missing values generated)
(672 missing values generated)
(672 missing values generated)
(679 missing values generated)
(679 missing values generated)
(679 missing values generated)
(679 missing values generated)
(686 missing values generated)
(686 missing values generated)
(686 missing values generated)
(686 missing values generated)
(694 missing values generated)
(694 missing values generated)
(694 missing values generated)
(694 missing values generated)
(702 missing values generated)
(702 missing values generated)
(702 missing values generated)
(702 missing values generated)
(679 missing values generated)
(679 missing values generated)
(679 missing values generated)
(679 missing values generated)
(686 missing values generated)
(686 missing values generated)
(686 missing values generated)
(686 missing values generated)
(693 missing values generated)
(693 missing values generated)
(693 missing values generated)
(693 missing values generated)
(669 missing values generated)
(669 missing values generated)
(669 missing values generated)
(669 missing values generated)
(676 missing values generated)
(676 missing values generated)
(676 missing values generated)
(676 missing values generated)
(683 missing values generated)
(683 missing values generated)
(683 missing values generated)
(683 missing values generated)
(658 missing values generated)
(658 missing values generated)
(658 missing values generated)
(658 missing values generated)
(642 missing values generated)
(642 missing values generated)
(642 missing values generated)
(642 missing values generated)
(647 missing values generated)
(647 missing values generated)
(647 missing values generated)
(647 missing values generated)
(656 missing values generated)
(656 missing values generated)
(656 missing values generated)
(656 missing values generated)
(639 missing values generated)
(639 missing values generated)
(639 missing values generated)
(639 missing values generated)
(653 missing values generated)
(653 missing values generated)
(653 missing values generated)
(653 missing values generated)
(667 missing values generated)
(667 missing values generated)
(667 missing values generated)
(667 missing values generated)
(651 missing values generated)
(651 missing values generated)
(651 missing values generated)
(651 missing values generated)
(663 missing values generated)
(663 missing values generated)
(663 missing values generated)
(663 missing values generated)
(646 missing values generated)
(646 missing values generated)
(646 missing values generated)
(646 missing values generated)
(660 missing values generated)
(660 missing values generated)
(660 missing values generated)
(660 missing values generated)
(674 missing values generated)
(674 missing values generated)
(674 missing values generated)
(674 missing values generated)
(674 missing values generated)
(674 missing values generated)
(674 missing values generated)
(674 missing values generated)
(688 missing values generated)
(688 missing values generated)
(688 missing values generated)
(688 missing values generated)
(671 missing values generated)
(671 missing values generated)
(671 missing values generated)
(671 missing values generated)
(685 missing values generated)
(685 missing values generated)
(685 missing values generated)
(685 missing values generated)
(671 missing values generated)
(671 missing values generated)
(671 missing values generated)
(671 missing values generated)
(685 missing values generated)
(685 missing values generated)
(685 missing values generated)
(685 missing values generated)
(668 missing values generated)
(668 missing values generated)
(668 missing values generated)
(668 missing values generated)
(682 missing values generated)
(682 missing values generated)
(682 missing values generated)
(682 missing values generated)
(666 missing values generated)
(666 missing values generated)
(666 missing values generated)
(666 missing values generated)
(680 missing values generated)
(680 missing values generated)
(680 missing values generated)
(680 missing values generated)
(633 missing values generated)
(633 missing values generated)
(633 missing values generated)
(633 missing values generated)
(647 missing values generated)
(647 missing values generated)
(647 missing values generated)
(647 missing values generated)
(661 missing values generated)
(661 missing values generated)
(661 missing values generated)
(661 missing values generated)
(675 missing values generated)
(675 missing values generated)
(675 missing values generated)
(675 missing values generated)
(689 missing values generated)
(689 missing values generated)
(689 missing values generated)
(689 missing values generated)
(665 missing values generated)
(665 missing values generated)
(665 missing values generated)
(665 missing values generated)
(672 missing values generated)
(672 missing values generated)
(672 missing values generated)
(672 missing values generated)
(679 missing values generated)
(679 missing values generated)
(679 missing values generated)
(679 missing values generated)
(686 missing values generated)
(686 missing values generated)
(686 missing values generated)
(686 missing values generated)
(693 missing values generated)
(693 missing values generated)
(693 missing values generated)
(693 missing values generated)
(639 missing values generated)
(639 missing values generated)
(639 missing values generated)
(639 missing values generated)
(646 missing values generated)
(646 missing values generated)
(646 missing values generated)
(646 missing values generated)
(653 missing values generated)
(653 missing values generated)
(653 missing values generated)
(653 missing values generated)
(660 missing values generated)
(660 missing values generated)
(660 missing values generated)
(660 missing values generated)
(667 missing values generated)
(667 missing values generated)
(667 missing values generated)
(667 missing values generated)
(674 missing values generated)
(674 missing values generated)
(674 missing values generated)
(674 missing values generated)
(681 missing values generated)
(681 missing values generated)
(681 missing values generated)
(681 missing values generated)
(688 missing values generated)
(688 missing values generated)
(688 missing values generated)
(688 missing values generated)
(664 missing values generated)
(664 missing values generated)
(664 missing values generated)
(664 missing values generated)
(671 missing values generated)
(671 missing values generated)
(671 missing values generated)
(671 missing values generated)
(648 missing values generated)
(648 missing values generated)
(648 missing values generated)
(648 missing values generated)
(655 missing values generated)
(655 missing values generated)
(655 missing values generated)
(655 missing values generated)
(662 missing values generated)
(662 missing values generated)
(662 missing values generated)
(662 missing values generated)
(669 missing values generated)
(669 missing values generated)
(669 missing values generated)
(669 missing values generated)
(676 missing values generated)
(676 missing values generated)
(676 missing values generated)
(676 missing values generated)
(683 missing values generated)
(683 missing values generated)
(683 missing values generated)
(683 missing values generated)
(690 missing values generated)
(690 missing values generated)
(690 missing values generated)
(690 missing values generated)
(680 missing values generated)
(680 missing values generated)
(680 missing values generated)
(680 missing values generated)
(687 missing values generated)
(687 missing values generated)
(687 missing values generated)
(687 missing values generated)
(694 missing values generated)
(694 missing values generated)
(694 missing values generated)
(694 missing values generated)
(701 missing values generated)
(701 missing values generated)
(701 missing values generated)
(701 missing values generated)
(708 missing values generated)
(708 missing values generated)
(708 missing values generated)
(708 missing values generated)
(715 missing values generated)
(715 missing values generated)
(715 missing values generated)
(715 missing values generated)
(722 missing values generated)
(722 missing values generated)
(722 missing values generated)
(722 missing values generated)
(729 missing values generated)
(729 missing values generated)
(729 missing values generated)
(729 missing values generated)

{com}. *
. 
. 
. 
. 
. 
. * (2) gen MEDIAN of error types by calendar months and updates = _Med1
. 
. * Wait note: wait ...
. 
. foreach update of local list {c -(}
{txt}  2{com}.                 
. capture drop DDErrorA01`update'_Med1
{txt}  3{com}. bysort yearmonth : egen DDErrorA01`update'_Med1 = median(DDErrorA01`update')
{txt}  4{com}. label var DDErrorA01`update'_Med1 "DayDeaA01 median error by calendar months and updates"
{txt}  5{com}. qui replace DDErrorA01`update'_Med1 = . if DayDeaMeSmA00 == . // before location was added to the estimates for the country
{txt}  6{com}. qui replace DDErrorA01`update'_Med1 = . if date == td(01jan2022) // 01jan2022 is not included in this study
{txt}  7{com}. qui replace DDErrorA01`update'_Med1 = . if date < td(17Apr2020) // 17Apr2020 is the earliest date of DELP forecasts for Iran
{txt}  8{com}. 
. capture drop DDAbsErrA01`update'_Med1
{txt}  9{com}. bysort yearmonth : egen DDAbsErrA01`update'_Med1 = median(DDAbsErrA01`update')
{txt} 10{com}. label var DDAbsErrA01`update'_Med1 "DayDeaA01 median absolute error by calendar months and updates"
{txt} 11{com}. qui replace DDAbsErrA01`update'_Med1 = . if DayDeaMeSmA00 == . // before location was added to the estimates for the country
{txt} 12{com}. qui replace DDAbsErrA01`update'_Med1 = . if date == td(01jan2022) // 01jan2022 is not included in this study
{txt} 13{com}. qui replace DDAbsErrA01`update'_Med1 = . if date < td(17Apr2020) // 17Apr2020 is the earliest date of DELP forecasts for Iran
{txt} 14{com}. 
. capture drop DDPerErrA01`update'_Med1
{txt} 15{com}. bysort yearmonth : egen DDPerErrA01`update'_Med1 = median(DDPerErrA01`update')
{txt} 16{com}. label var DDPerErrA01`update'_Med1 "DayDeaA01 median % error by calendar months and updates"
{txt} 17{com}. qui replace DDPerErrA01`update'_Med1 = . if DayDeaMeSmA00 == . // before location was added to the estimates for the country
{txt} 18{com}. qui replace DDPerErrA01`update'_Med1 = . if date == td(01jan2022) // 01jan2022 is not included in this study
{txt} 19{com}. qui replace DDPerErrA01`update'_Med1 = . if date < td(17Apr2020) // 17Apr2020 is the earliest date of DELP forecasts for Iran
{txt} 20{com}. 
. capture drop DDAbPeErA01`update'_Med1
{txt} 21{com}. bysort yearmonth : egen DDAbPeErA01`update'_Med1 = median(DDAbPeErA01`update')
{txt} 22{com}. label var DDAbPeErA01`update'_Med1 "DayDeaA01 median absolute % error by calendar months and updates" 
{txt} 23{com}. qui replace DDAbPeErA01`update'_Med1 = . if DayDeaMeSmA00 == . // before location was added to the estimates for the country
{txt} 24{com}. qui replace DDAbPeErA01`update'_Med1 = . if date == td(01jan2022) // 01jan2022 is not included in this study
{txt} 25{com}. qui replace DDAbPeErA01`update'_Med1 = . if date < td(17Apr2020) // 17Apr2020 is the earliest date of DELP forecasts for Iran
{txt} 26{com}. 
. {c )-}
{txt}(641 missing values generated)
(641 missing values generated)
(641 missing values generated)
(641 missing values generated)
(641 missing values generated)
(641 missing values generated)
(641 missing values generated)
(641 missing values generated)
(671 missing values generated)
(671 missing values generated)
(671 missing values generated)
(671 missing values generated)
(671 missing values generated)
(671 missing values generated)
(671 missing values generated)
(671 missing values generated)
(671 missing values generated)
(671 missing values generated)
(671 missing values generated)
(671 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(671 missing values generated)
(671 missing values generated)
(671 missing values generated)
(671 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(609 missing values generated)
(609 missing values generated)
(609 missing values generated)
(609 missing values generated)
(609 missing values generated)
(609 missing values generated)
(609 missing values generated)
(609 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(610 missing values generated)
(610 missing values generated)
(610 missing values generated)
(610 missing values generated)
(610 missing values generated)
(610 missing values generated)
(610 missing values generated)
(610 missing values generated)
(641 missing values generated)
(641 missing values generated)
(641 missing values generated)
(641 missing values generated)
(610 missing values generated)
(610 missing values generated)
(610 missing values generated)
(610 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(609 missing values generated)
(609 missing values generated)
(609 missing values generated)
(609 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(670 missing values generated)
(670 missing values generated)
(670 missing values generated)
(670 missing values generated)
(642 missing values generated)
(642 missing values generated)
(642 missing values generated)
(642 missing values generated)
(642 missing values generated)
(642 missing values generated)
(642 missing values generated)
(642 missing values generated)
(642 missing values generated)
(642 missing values generated)
(642 missing values generated)
(642 missing values generated)
(642 missing values generated)
(642 missing values generated)
(642 missing values generated)
(642 missing values generated)
(643 missing values generated)
(643 missing values generated)
(643 missing values generated)
(643 missing values generated)
(643 missing values generated)
(643 missing values generated)
(643 missing values generated)
(643 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(610 missing values generated)
(610 missing values generated)
(610 missing values generated)
(610 missing values generated)
(610 missing values generated)
(610 missing values generated)
(610 missing values generated)
(610 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(671 missing values generated)
(671 missing values generated)
(671 missing values generated)
(671 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(670 missing values generated)
(670 missing values generated)
(670 missing values generated)
(670 missing values generated)
(670 missing values generated)
(670 missing values generated)
(670 missing values generated)
(670 missing values generated)
(609 missing values generated)
(609 missing values generated)
(609 missing values generated)
(609 missing values generated)
(609 missing values generated)
(609 missing values generated)
(609 missing values generated)
(609 missing values generated)
(609 missing values generated)
(609 missing values generated)
(609 missing values generated)
(609 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(671 missing values generated)
(671 missing values generated)
(671 missing values generated)
(671 missing values generated)
(641 missing values generated)
(641 missing values generated)
(641 missing values generated)
(641 missing values generated)
(641 missing values generated)
(641 missing values generated)
(641 missing values generated)
(641 missing values generated)
(610 missing values generated)
(610 missing values generated)
(610 missing values generated)
(610 missing values generated)
(610 missing values generated)
(610 missing values generated)
(610 missing values generated)
(610 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(640 missing values generated)
(671 missing values generated)
(671 missing values generated)
(671 missing values generated)
(671 missing values generated)
(671 missing values generated)
(671 missing values generated)
(671 missing values generated)
(671 missing values generated)
(671 missing values generated)
(671 missing values generated)
(671 missing values generated)
(671 missing values generated)
(671 missing values generated)
(671 missing values generated)
(671 missing values generated)
(671 missing values generated)
(701 missing values generated)
(701 missing values generated)
(701 missing values generated)
(701 missing values generated)
(701 missing values generated)
(701 missing values generated)
(701 missing values generated)
(701 missing values generated)
(701 missing values generated)
(701 missing values generated)
(701 missing values generated)
(701 missing values generated)
(701 missing values generated)
(701 missing values generated)
(701 missing values generated)
(701 missing values generated)
(701 missing values generated)
(701 missing values generated)
(701 missing values generated)
(701 missing values generated)

{com}. *
. 
. 
. 
.  
. * (3) gen AVERAGE over updates of MEDIAN of error types by calendar months = _Mean1
. 
. * Wait note: wait ...
. 
. 
. 
. * gen DDErrorA01_Mean1
. 
. order DDErrorA0120200417_Med1
{txt}
{com}. order DDErrorA0120200424_Med1
{txt}
{com}. order DDErrorA0120200501_Med1
{txt}
{com}. order DDErrorA0120200509_Med1
{txt}
{com}. order DDErrorA0120200517_Med1
{txt}
{com}. order DDErrorA0120200524_Med1
{txt}
{com}. order DDErrorA0120200531_Med1
{txt}
{com}. order DDErrorA0120200607_Med1
{txt}
{com}. order DDErrorA0120200614_Med1
{txt}
{com}. order DDErrorA0120200621_Med1
{txt}
{com}. order DDErrorA0120200628_Med1
{txt}
{com}. order DDErrorA0120200704_Med1
{txt}
{com}. order DDErrorA0120200718_Med1
{txt}
{com}. order DDErrorA0120200723_Med1
{txt}
{com}. order DDErrorA0120200801_Med1
{txt}
{com}. order DDErrorA0120200815_Med1
{txt}
{com}. order DDErrorA0120200829_Med1
{txt}
{com}. order DDErrorA0120200912_Med1
{txt}
{com}. order DDErrorA0120200926_Med1
{txt}
{com}. order DDErrorA0120201008_Med1
{txt}
{com}. order DDErrorA0120201022_Med1
{txt}
{com}. order DDErrorA0120201105_Med1
{txt}
{com}. order DDErrorA0120201119_Med1
{txt}
{com}. order DDErrorA0120201119_Med1
{txt}
{com}. order DDErrorA0120201203_Med1
{txt}
{com}. order DDErrorA0120201217_Med1
{txt}
{com}. order DDErrorA0120201231_Med1
{txt}
{com}. order DDErrorA0120210114_Med1
{txt}
{com}. order DDErrorA0120210128_Med1
{txt}
{com}. order DDErrorA0120210211_Med1
{txt}
{com}. order DDErrorA0120210225_Med1
{txt}
{com}. order DDErrorA0120210311_Med1
{txt}
{com}. order DDErrorA0120210325_Med1
{txt}
{com}. order DDErrorA0120210408_Med1
{txt}
{com}. order DDErrorA0120210422_Med1
{txt}
{com}. order DDErrorA0120210506_Med1
{txt}
{com}. order DDErrorA0120210520_Med1
{txt}
{com}. order DDErrorA0120210603_Med1
{txt}
{com}. order DDErrorA0120210610_Med1
{txt}
{com}. order DDErrorA0120210617_Med1
{txt}
{com}. order DDErrorA0120210624_Med1
{txt}
{com}. order DDErrorA0120210701_Med1
{txt}
{com}. order DDErrorA0120210708_Med1
{txt}
{com}. order DDErrorA0120210715_Med1
{txt}
{com}. order DDErrorA0120210722_Med1
{txt}
{com}. order DDErrorA0120210729_Med1
{txt}
{com}. order DDErrorA0120210805_Med1
{txt}
{com}. order DDErrorA0120210812_Med1
{txt}
{com}. order DDErrorA0120210819_Med1
{txt}
{com}. order DDErrorA0120210826_Med1
{txt}
{com}. order DDErrorA0120210902_Med1
{txt}
{com}. order DDErrorA0120210909_Med1
{txt}
{com}. order DDErrorA0120210916_Med1
{txt}
{com}. order DDErrorA0120210923_Med1
{txt}
{com}. order DDErrorA0120210930_Med1
{txt}
{com}. order DDErrorA0120211007_Med1
{txt}
{com}. order DDErrorA0120211014_Med1
{txt}
{com}. order DDErrorA0120211021_Med1
{txt}
{com}. order DDErrorA0120211028_Med1
{txt}
{com}. order DDErrorA0120211104_Med1
{txt}
{com}. order DDErrorA0120211111_Med1
{txt}
{com}. order DDErrorA0120211118_Med1
{txt}
{com}. order DDErrorA0120211125_Med1
{txt}
{com}. order DDErrorA0120211202_Med1
{txt}
{com}. order DDErrorA0120211209_Med1
{txt}
{com}. order DDErrorA0120211216_Med1
{txt}
{com}. order DDErrorA0120211223_Med1
{txt}
{com}. order DDErrorA0120211230_Med1
{txt}
{com}.                 
.                 
. capture drop DDErrorA01_Mean1           
{txt}
{com}. egen DDErrorA01_Mean1 = rowmean(DDErrorA0120211230_Med1-DDErrorA0120200417_Med1) 
{txt}(108 missing values generated)

{com}. label var DDErrorA01_Mean1 "DDErrorA01 mean over updates of median error by calendar months"
{txt}
{com}. qui replace DDErrorA01_Mean1 = . if DayDeaMeSmA00 == . // before location was added to the estimates for the country
{txt}
{com}. qui replace DDErrorA01_Mean1 = . if date == td(01jan2022) // 01jan2022 is not included in this study
{txt}
{com}. qui replace DDErrorA01_Mean1 = . if date < td(17Apr2020) // 17Apr2020 is the earliest date of DELP forecasts for Iran
{txt}
{com}. 
. 
. 
. 
. 
. 
. * gen DDAbsErrA01_Mean1
. 
. 
. order DDAbsErrA0120200417_Med1
{txt}
{com}. order DDAbsErrA0120200424_Med1
{txt}
{com}. order DDAbsErrA0120200501_Med1
{txt}
{com}. order DDAbsErrA0120200509_Med1
{txt}
{com}. order DDAbsErrA0120200517_Med1
{txt}
{com}. order DDAbsErrA0120200524_Med1
{txt}
{com}. order DDAbsErrA0120200531_Med1
{txt}
{com}. order DDAbsErrA0120200607_Med1
{txt}
{com}. order DDAbsErrA0120200614_Med1
{txt}
{com}. order DDAbsErrA0120200621_Med1
{txt}
{com}. order DDAbsErrA0120200628_Med1
{txt}
{com}. order DDAbsErrA0120200704_Med1
{txt}
{com}. order DDAbsErrA0120200718_Med1
{txt}
{com}. order DDAbsErrA0120200723_Med1
{txt}
{com}. order DDAbsErrA0120200801_Med1
{txt}
{com}. order DDAbsErrA0120200815_Med1
{txt}
{com}. order DDAbsErrA0120200829_Med1
{txt}
{com}. order DDAbsErrA0120200912_Med1
{txt}
{com}. order DDAbsErrA0120200926_Med1
{txt}
{com}. order DDAbsErrA0120201008_Med1
{txt}
{com}. order DDAbsErrA0120201022_Med1
{txt}
{com}. order DDAbsErrA0120201105_Med1
{txt}
{com}. order DDAbsErrA0120201119_Med1
{txt}
{com}. order DDAbsErrA0120201119_Med1
{txt}
{com}. order DDAbsErrA0120201203_Med1
{txt}
{com}. order DDAbsErrA0120201217_Med1
{txt}
{com}. order DDAbsErrA0120201231_Med1
{txt}
{com}. order DDAbsErrA0120210114_Med1
{txt}
{com}. order DDAbsErrA0120210128_Med1
{txt}
{com}. order DDAbsErrA0120210211_Med1
{txt}
{com}. order DDAbsErrA0120210225_Med1
{txt}
{com}. order DDAbsErrA0120210311_Med1
{txt}
{com}. order DDAbsErrA0120210325_Med1
{txt}
{com}. order DDAbsErrA0120210408_Med1
{txt}
{com}. order DDAbsErrA0120210422_Med1
{txt}
{com}. order DDAbsErrA0120210506_Med1
{txt}
{com}. order DDAbsErrA0120210520_Med1
{txt}
{com}. order DDAbsErrA0120210603_Med1
{txt}
{com}. order DDAbsErrA0120210610_Med1
{txt}
{com}. order DDAbsErrA0120210617_Med1
{txt}
{com}. order DDAbsErrA0120210624_Med1
{txt}
{com}. order DDAbsErrA0120210701_Med1
{txt}
{com}. order DDAbsErrA0120210708_Med1
{txt}
{com}. order DDAbsErrA0120210715_Med1
{txt}
{com}. order DDAbsErrA0120210722_Med1
{txt}
{com}. order DDAbsErrA0120210729_Med1
{txt}
{com}. order DDAbsErrA0120210805_Med1
{txt}
{com}. order DDAbsErrA0120210812_Med1
{txt}
{com}. order DDAbsErrA0120210819_Med1
{txt}
{com}. order DDAbsErrA0120210826_Med1
{txt}
{com}. order DDAbsErrA0120210902_Med1
{txt}
{com}. order DDAbsErrA0120210909_Med1
{txt}
{com}. order DDAbsErrA0120210916_Med1
{txt}
{com}. order DDAbsErrA0120210923_Med1
{txt}
{com}. order DDAbsErrA0120210930_Med1
{txt}
{com}. order DDAbsErrA0120211007_Med1
{txt}
{com}. order DDAbsErrA0120211014_Med1
{txt}
{com}. order DDAbsErrA0120211021_Med1
{txt}
{com}. order DDAbsErrA0120211028_Med1
{txt}
{com}. order DDAbsErrA0120211104_Med1
{txt}
{com}. order DDAbsErrA0120211111_Med1
{txt}
{com}. order DDAbsErrA0120211118_Med1
{txt}
{com}. order DDAbsErrA0120211125_Med1
{txt}
{com}. order DDAbsErrA0120211202_Med1
{txt}
{com}. order DDAbsErrA0120211209_Med1
{txt}
{com}. order DDAbsErrA0120211216_Med1
{txt}
{com}. order DDAbsErrA0120211223_Med1
{txt}
{com}. order DDAbsErrA0120211230_Med1
{txt}
{com}. 
. 
. capture drop DDAbsErrA01_Mean1
{txt}
{com}. egen DDAbsErrA01_Mean1 = rowmean(DDAbsErrA0120211230_Med1-DDAbsErrA0120200417_Med1) 
{txt}(108 missing values generated)

{com}. label var DDAbsErrA01_Mean1 "DDAbsErrA01 mean over updates of median absolute error by calendar months"
{txt}
{com}. qui replace DDAbsErrA01_Mean1 = . if DayDeaMeSmA00 == . // before location was added to the estimates for the country
{txt}
{com}. qui replace DDAbsErrA01_Mean1 = . if date == td(01jan2022) // 01jan2022 is not included in this study
{txt}
{com}. qui replace DDAbsErrA01_Mean1 = . if date < td(17Apr2020) // 17Apr2020 is the earliest date of DELP forecasts for Iran
{txt}
{com}. 
. 
. 
. 
. 
. 
. 
. * gen DDPerErrA01_Mean1
. 
. 
. order DDPerErrA0120200417_Med1
{txt}
{com}. order DDPerErrA0120200424_Med1
{txt}
{com}. order DDPerErrA0120200501_Med1
{txt}
{com}. order DDPerErrA0120200509_Med1
{txt}
{com}. order DDPerErrA0120200517_Med1
{txt}
{com}. order DDPerErrA0120200524_Med1
{txt}
{com}. order DDPerErrA0120200531_Med1
{txt}
{com}. order DDPerErrA0120200607_Med1
{txt}
{com}. order DDPerErrA0120200614_Med1
{txt}
{com}. order DDPerErrA0120200621_Med1
{txt}
{com}. order DDPerErrA0120200628_Med1
{txt}
{com}. order DDPerErrA0120200704_Med1
{txt}
{com}. order DDPerErrA0120200718_Med1
{txt}
{com}. order DDPerErrA0120200723_Med1
{txt}
{com}. order DDPerErrA0120200801_Med1
{txt}
{com}. order DDPerErrA0120200815_Med1
{txt}
{com}. order DDPerErrA0120200829_Med1
{txt}
{com}. order DDPerErrA0120200912_Med1
{txt}
{com}. order DDPerErrA0120200926_Med1
{txt}
{com}. order DDPerErrA0120201008_Med1
{txt}
{com}. order DDPerErrA0120201022_Med1
{txt}
{com}. order DDPerErrA0120201105_Med1
{txt}
{com}. order DDPerErrA0120201119_Med1
{txt}
{com}. order DDPerErrA0120201119_Med1
{txt}
{com}. order DDPerErrA0120201203_Med1
{txt}
{com}. order DDPerErrA0120201217_Med1
{txt}
{com}. order DDPerErrA0120201231_Med1
{txt}
{com}. order DDPerErrA0120210114_Med1
{txt}
{com}. order DDPerErrA0120210128_Med1
{txt}
{com}. order DDPerErrA0120210211_Med1
{txt}
{com}. order DDPerErrA0120210225_Med1
{txt}
{com}. order DDPerErrA0120210311_Med1
{txt}
{com}. order DDPerErrA0120210325_Med1
{txt}
{com}. order DDPerErrA0120210408_Med1
{txt}
{com}. order DDPerErrA0120210422_Med1
{txt}
{com}. order DDPerErrA0120210506_Med1
{txt}
{com}. order DDPerErrA0120210520_Med1
{txt}
{com}. order DDPerErrA0120210603_Med1
{txt}
{com}. order DDPerErrA0120210610_Med1
{txt}
{com}. order DDPerErrA0120210617_Med1
{txt}
{com}. order DDPerErrA0120210624_Med1
{txt}
{com}. order DDPerErrA0120210701_Med1
{txt}
{com}. order DDPerErrA0120210708_Med1
{txt}
{com}. order DDPerErrA0120210715_Med1
{txt}
{com}. order DDPerErrA0120210722_Med1
{txt}
{com}. order DDPerErrA0120210729_Med1
{txt}
{com}. order DDPerErrA0120210805_Med1
{txt}
{com}. order DDPerErrA0120210812_Med1
{txt}
{com}. order DDPerErrA0120210819_Med1
{txt}
{com}. order DDPerErrA0120210826_Med1
{txt}
{com}. order DDPerErrA0120210902_Med1
{txt}
{com}. order DDPerErrA0120210909_Med1
{txt}
{com}. order DDPerErrA0120210916_Med1
{txt}
{com}. order DDPerErrA0120210923_Med1
{txt}
{com}. order DDPerErrA0120210930_Med1
{txt}
{com}. order DDPerErrA0120211007_Med1
{txt}
{com}. order DDPerErrA0120211014_Med1
{txt}
{com}. order DDPerErrA0120211021_Med1
{txt}
{com}. order DDPerErrA0120211028_Med1
{txt}
{com}. order DDPerErrA0120211104_Med1
{txt}
{com}. order DDPerErrA0120211111_Med1
{txt}
{com}. order DDPerErrA0120211118_Med1
{txt}
{com}. order DDPerErrA0120211125_Med1
{txt}
{com}. order DDPerErrA0120211202_Med1
{txt}
{com}. order DDPerErrA0120211209_Med1
{txt}
{com}. order DDPerErrA0120211216_Med1
{txt}
{com}. order DDPerErrA0120211223_Med1
{txt}
{com}. order DDPerErrA0120211230_Med1
{txt}
{com}.                 
. 
. capture drop DDPerErrA01_Mean1
{txt}
{com}. egen DDPerErrA01_Mean1 = rowmean(DDPerErrA0120211230_Med1-DDPerErrA0120200417_Med1) 
{txt}(108 missing values generated)

{com}. label var DDPerErrA01_Mean1 "DDPerErrA01 mean over updates of median % error by calendar months"
{txt}
{com}. qui replace DDPerErrA01_Mean1 = . if DayDeaMeSmA00 == . // before location was added to the estimates for the country
{txt}
{com}. qui replace DDPerErrA01_Mean1 = . if date == td(01jan2022) // 01jan2022 is not included in this study
{txt}
{com}. qui replace DDPerErrA01_Mean1 = . if date < td(17Apr2020) // 17Apr2020 is the earliest date of DELP forecasts for Iran
{txt}
{com}. 
. 
. 
. 
. 
. 
. 
. 
. * gen DDAbPeErA01_Mean1
. 
. 
. order DDAbPeErA0120200417_Med1
{txt}
{com}. order DDAbPeErA0120200424_Med1
{txt}
{com}. order DDAbPeErA0120200501_Med1
{txt}
{com}. order DDAbPeErA0120200509_Med1
{txt}
{com}. order DDAbPeErA0120200517_Med1
{txt}
{com}. order DDAbPeErA0120200524_Med1
{txt}
{com}. order DDAbPeErA0120200531_Med1
{txt}
{com}. order DDAbPeErA0120200607_Med1
{txt}
{com}. order DDAbPeErA0120200614_Med1
{txt}
{com}. order DDAbPeErA0120200621_Med1
{txt}
{com}. order DDAbPeErA0120200628_Med1
{txt}
{com}. order DDAbPeErA0120200704_Med1
{txt}
{com}. order DDAbPeErA0120200718_Med1
{txt}
{com}. order DDAbPeErA0120200723_Med1
{txt}
{com}. order DDAbPeErA0120200801_Med1
{txt}
{com}. order DDAbPeErA0120200815_Med1
{txt}
{com}. order DDAbPeErA0120200829_Med1
{txt}
{com}. order DDAbPeErA0120200912_Med1
{txt}
{com}. order DDAbPeErA0120200926_Med1
{txt}
{com}. order DDAbPeErA0120201008_Med1
{txt}
{com}. order DDAbPeErA0120201022_Med1
{txt}
{com}. order DDAbPeErA0120201105_Med1
{txt}
{com}. order DDAbPeErA0120201119_Med1
{txt}
{com}. order DDAbPeErA0120201119_Med1
{txt}
{com}. order DDAbPeErA0120201203_Med1
{txt}
{com}. order DDAbPeErA0120201217_Med1
{txt}
{com}. order DDAbPeErA0120201231_Med1
{txt}
{com}. order DDAbPeErA0120210114_Med1
{txt}
{com}. order DDAbPeErA0120210128_Med1
{txt}
{com}. order DDAbPeErA0120210211_Med1
{txt}
{com}. order DDAbPeErA0120210225_Med1
{txt}
{com}. order DDAbPeErA0120210311_Med1
{txt}
{com}. order DDAbPeErA0120210325_Med1
{txt}
{com}. order DDAbPeErA0120210408_Med1
{txt}
{com}. order DDAbPeErA0120210422_Med1
{txt}
{com}. order DDAbPeErA0120210506_Med1
{txt}
{com}. order DDAbPeErA0120210520_Med1
{txt}
{com}. order DDAbPeErA0120210603_Med1
{txt}
{com}. order DDAbPeErA0120210610_Med1
{txt}
{com}. order DDAbPeErA0120210617_Med1
{txt}
{com}. order DDAbPeErA0120210624_Med1
{txt}
{com}. order DDAbPeErA0120210701_Med1
{txt}
{com}. order DDAbPeErA0120210708_Med1
{txt}
{com}. order DDAbPeErA0120210715_Med1
{txt}
{com}. order DDAbPeErA0120210722_Med1
{txt}
{com}. order DDAbPeErA0120210729_Med1
{txt}
{com}. order DDAbPeErA0120210805_Med1
{txt}
{com}. order DDAbPeErA0120210812_Med1
{txt}
{com}. order DDAbPeErA0120210819_Med1
{txt}
{com}. order DDAbPeErA0120210826_Med1
{txt}
{com}. order DDAbPeErA0120210902_Med1
{txt}
{com}. order DDAbPeErA0120210909_Med1
{txt}
{com}. order DDAbPeErA0120210916_Med1
{txt}
{com}. order DDAbPeErA0120210923_Med1
{txt}
{com}. order DDAbPeErA0120210930_Med1
{txt}
{com}. order DDAbPeErA0120211007_Med1
{txt}
{com}. order DDAbPeErA0120211014_Med1
{txt}
{com}. order DDAbPeErA0120211021_Med1
{txt}
{com}. order DDAbPeErA0120211028_Med1
{txt}
{com}. order DDAbPeErA0120211104_Med1
{txt}
{com}. order DDAbPeErA0120211111_Med1
{txt}
{com}. order DDAbPeErA0120211118_Med1
{txt}
{com}. order DDAbPeErA0120211125_Med1
{txt}
{com}. order DDAbPeErA0120211202_Med1
{txt}
{com}. order DDAbPeErA0120211209_Med1
{txt}
{com}. order DDAbPeErA0120211216_Med1
{txt}
{com}. order DDAbPeErA0120211223_Med1
{txt}
{com}. order DDAbPeErA0120211230_Med1
{txt}
{com}. 
. 
. capture drop DDAbPeErA01_Mean1
{txt}
{com}. egen DDAbPeErA01_Mean1 = rowmean(DDAbPeErA0120211230_Med1-DDAbPeErA0120200417_Med1) 
{txt}(108 missing values generated)

{com}. label var DDAbPeErA01_Mean1 "DDAbPeErA01 mean over updates of median absolute % error by calendar months"
{txt}
{com}. qui replace DDAbPeErA01_Mean1 = . if DayDeaMeSmA00 == . // before location was added to the estimates for the country
{txt}
{com}. qui replace DDAbPeErA01_Mean1 = . if date == td(01jan2022) // 01jan2022 is not included in this study
{txt}
{com}. qui replace DDAbPeErA01_Mean1 = . if date < td(17Apr2020) // 17Apr2020 is the earliest date of DELP forecasts for Iran
{txt}
{com}. 
. 
.  
.  
.  
.  
. 
. 
. 
. 
. * (4) gen AVERAGE over calendar months of _Mean1  = _Mean2
. 
. * Wait note: wait ...
. 
.                 
. egen DDErrorA01_Mean2 = mean(DDErrorA01_Mean1) // get mean for all calendar months of _Mean1
{txt}
{com}. label var DDErrorA01_Mean2 "DDErrorA01 Mean over calendar months of median error over updates"
{txt}
{com}. 
. egen DDAbsErrA01_Mean2 = mean(DDAbsErrA01_Mean1) // get mean for all calendar months of _Mean1
{txt}
{com}. label var DDAbsErrA01_Mean2 "DDAbsErrA01 Mean over calendar months of median absolute error over updates"
{txt}
{com}. 
. egen DDPerErrA01_Mean2 = mean(DDPerErrA01_Mean1) // get mean for all calendar months of _Mean1
{txt}
{com}. label var DDPerErrA01_Mean2 "DDPerErrA01 Mean over calendar months of median % error over updates"
{txt}
{com}. 
. egen DDAbPeErA01_Mean2 = mean(DDAbPeErA01_Mean1) // get mean for all calendar months of _Mean1
{txt}
{com}. label var DDAbPeErA01_Mean2 "DDAbPeErA01 Mean over calendar months of median absolute % error over updates"
{txt}
{com}. 
. 
. 
. 
. 
. 
. 
. ******
. * graph 3 Daily deaths, Error
. 
. twoway ///
> (line DDErrorA0120200417 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120200424 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120200501 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120200509 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120200517 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120200524 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120200531 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120200607 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120200614 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120200621 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120200628 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120200704 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120200718 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120200723 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120200801 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120200815 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120200829 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120200912 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120200926 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120201008 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120201022 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120201105 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120201119 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120201119 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120201203 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120201217 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120201231 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120210114 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120210128 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120210211 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120210225 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120210311 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120210325 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120210408 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120210422 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120210506 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120210520 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120210603 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120210610 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120210617 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120210624 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120210701 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120210708 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120210715 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120210722 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120210729 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120210805 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120210812 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120210819 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120210826 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120210902 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120210909 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120210916 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120210923 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120210930 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120211007 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120211014 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120211021 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120211028 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120211104 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120211111 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120211118 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120211125 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120211202 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120211209 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120211216 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120211223 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDErrorA0120211230 date, sort lcolor(red) lwidth(thin)) /// 
> if date >= td(01jan2020) & date <= td(01jan2022) ///
> , xtitle(Date) xlabel(#24, format(%tdYY-NN-DD) labsize(small)) xlabel(, grid) xlabel(, grid) ///
> xlabel(, angle(forty_five)) ylabel(, format(%15.0fc) labsize(small))  ylabel(, labsize(small) angle(horizontal)) ///
> ytitle(Daily deaths error measure) title("C19 daily deaths errors", size(medium) color(black)) /// 
> xscale(lwidth(vthin) lcolor(gray*.2)) yscale(lwidth(vthin) lcolor(gray*.2)) legend(off) yscale(titlegap(3)) ///
> subtitle("$country, DELP, all updates, forecast only", size(small)) 
{res}{txt}
{com}. 
. qui graph export "graph 3 C19 daily deaths error, $country, DELP, all updates.pdf", replace
{txt}
{com}. 
. 
. 
. 
. 
. ******
. * graph 4 Daily deaths, Absolute Error
. 
. twoway ///
> (line DDAbsErrA0120200417 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120200424 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120200501 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120200509 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120200517 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120200524 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120200531 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120200607 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120200614 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120200621 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120200628 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120200704 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120200718 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120200723 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120200801 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120200815 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120200829 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120200912 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120200926 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120201008 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120201022 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120201105 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120201119 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120201119 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120201203 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120201217 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120201231 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120210114 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120210128 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120210211 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120210225 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120210311 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120210325 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120210408 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120210422 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120210506 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120210520 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120210603 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120210610 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120210617 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120210624 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120210701 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120210708 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120210715 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120210722 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120210729 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120210805 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120210812 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120210819 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120210826 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120210902 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120210909 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120210916 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120210923 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120210930 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120211007 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120211014 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120211021 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120211028 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120211104 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120211111 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120211118 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120211125 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120211202 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120211209 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120211216 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120211223 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbsErrA0120211230 date, sort lcolor(red) lwidth(thin)) /// 
> if date >= td(01jan2020) & date <= td(01jan2022) ///
> , xtitle(Date) xlabel(#24, format(%tdYY-NN-DD) labsize(small)) xlabel(, grid) xlabel(, grid) ///
> xlabel(, angle(forty_five)) ylabel(, format(%15.0fc) labsize(small))  ylabel(, labsize(small) angle(horizontal)) ///
> ytitle(Daily deaths error measure) title("C19 daily deaths absolute errors", size(medium) color(black)) /// 
> xscale(lwidth(vthin) lcolor(gray*.2)) yscale(lwidth(vthin) lcolor(gray*.2)) legend(off) yscale(titlegap(3)) ///
> subtitle("$country, DELP, all updates, forecast only", size(small))
{res}{txt}
{com}. 
. qui graph export "graph 4 C19 daily deaths absolute error, $country, DELP, all updates.pdf", replace
{txt}
{com}. 
. 
. 
. 
. 
. 
. 
. 
. ******
. * graph 5 Daily deaths, % Error
. 
. twoway ///
> (line DDPerErrA0120200417 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120200424 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120200501 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120200509 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120200517 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120200524 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120200531 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120200607 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120200614 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120200621 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120200628 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120200704 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120200718 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120200723 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120200801 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120200815 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120200829 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120200912 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120200926 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120201008 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120201022 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120201105 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120201119 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120201119 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120201203 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120201217 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120201231 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120210114 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120210128 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120210211 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120210225 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120210311 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120210325 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120210408 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120210422 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120210506 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120210520 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120210603 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120210610 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120210617 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120210624 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120210701 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120210708 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120210715 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120210722 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120210729 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120210805 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120210812 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120210819 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120210826 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120210902 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120210909 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120210916 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120210923 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120210930 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120211007 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120211014 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120211021 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120211028 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120211104 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120211111 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120211118 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120211125 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120211202 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120211209 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120211216 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120211223 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDPerErrA0120211230 date, sort lcolor(red) lwidth(thin)) /// 
> if date >= td(01jan2020) & date <= td(01jan2022) ///
> , xtitle(Date) xlabel(#24, format(%tdYY-NN-DD) labsize(small)) xlabel(, grid) xlabel(, grid) ///
> xlabel(, angle(forty_five)) ylabel(, format(%15.0fc) labsize(small))  ylabel(, labsize(small) angle(horizontal)) ///
> ytitle(Daily deaths error measure) title("C19 daily deaths percent errors", size(medium) color(black)) /// 
> xscale(lwidth(vthin) lcolor(gray*.2)) yscale(lwidth(vthin) lcolor(gray*.2)) legend(off) yscale(titlegap(3)) ///
> subtitle("$country, DELP, all updates, forecast only", size(small))
{res}{txt}
{com}. 
. qui graph export "graph 5 C19 daily deaths % error, $country, DELP, all updates.pdf", replace
{txt}
{com}. 
. 
. 
. 
. 
. 
. 
. 
. ******
. * graph 6 Daily deaths, Absolute % Error
. 
. twoway ///
> (line DDAbPeErA0120200417 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120200424 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120200501 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120200509 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120200517 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120200524 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120200531 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120200607 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120200614 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120200621 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120200628 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120200704 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120200718 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120200723 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120200801 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120200815 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120200829 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120200912 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120200926 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120201008 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120201022 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120201105 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120201119 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120201119 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120201203 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120201217 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120201231 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120210114 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120210128 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120210211 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120210225 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120210311 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120210325 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120210408 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120210422 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120210506 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120210520 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120210603 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120210610 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120210617 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120210624 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120210701 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120210708 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120210715 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120210722 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120210729 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120210805 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120210812 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120210819 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120210826 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120210902 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120210909 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120210916 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120210923 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120210930 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120211007 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120211014 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120211021 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120211028 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120211104 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120211111 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120211118 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120211125 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120211202 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120211209 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120211216 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120211223 date, sort lcolor(red) lwidth(thin)) /// 
> (line DDAbPeErA0120211230 date, sort lcolor(red) lwidth(thin)) /// 
> if date >= td(01jan2020) & date <= td(01jan2022) ///
> , xtitle(Date) xlabel(#24, format(%tdYY-NN-DD) labsize(small)) xlabel(, grid) xlabel(, grid) ///
> xlabel(, angle(forty_five)) ylabel(, format(%15.0fc) labsize(small))  ylabel(, labsize(small) angle(horizontal)) ///
> ytitle(Daily deaths error measure) title("C19 daily deaths absolute percent errors", size(medium) color(black)) /// 
> xscale(lwidth(vthin) lcolor(gray*.2)) yscale(lwidth(vthin) lcolor(gray*.2)) legend(off) yscale(titlegap(3)) ///
> subtitle("$country, DELP, all updates, forecast only", size(small))
{res}{txt}
{com}. 
. qui graph export "graph 6 C19 daily deaths absolute % error, $country, DELP, all updates.pdf", replace
{txt}
{com}. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. ***************************************************************
. * graph 7 a Daily deaths, average median errors 
. 
. twoway ///
> (line DDErrorA01_Mean1 date, sort lcolor(red) lwidth(medium)) /// 
> if date >= td(01jan2020) & date <= td(01jan2022) ///
> , xtitle(Date) xlabel(#24, format(%tdYY-NN-DD) labsize(small)) xlabel(, grid) xlabel(, grid) ///
> xlabel(, angle(forty_five)) ylabel(, format(%15.0fc) labsize(small))  ylabel(, labsize(small) angle(horizontal)) ///
> ytitle(Daily deaths error measure) title("C19 daily deaths, average median errors", size(medium) color(black)) /// 
> subtitle("$country, DELP, forecast only", size(small)) xscale(lwidth(vthin) lcolor(gray*.2)) yscale(lwidth(vthin) lcolor(gray*.2)) ///
> xscale(lwidth(vthin) lcolor(gray*.2)) yscale(lwidth(vthin) lcolor(gray*.2)) legend(off) yscale(titlegap(3))
{res}{txt}
{com}. 
. qui graph export "graph 7 a C19 daily deaths error, $country, DELP, Error Mean1.pdf", replace
{txt}
{com}. 
. 
. 
. 
. *********************
. * smooth median error for better viewing 
. 
. encode provincestate, gen(provincestate_encoded)
{txt}
{com}. 
. tsset provincestate_encoded date, daily   
{res}{txt}{col 8}panel variable:  {res}provincestate_encoded (strongly balanced)
{txt}{col 9}time variable:  {res}{col 25}date, 01Jan2020 to 01Jan2022
{txt}{col 17}delta:  {res}1 day
{txt}
{com}. 
. tssmooth ma DDErrorA01_Mean1_window = DDErrorA01_Mean1, window(3 1 3)
{txt}The smoother applied was
{res}{p 5 5 5}(1/7)*[x(t-3) + x(t-2) + x(t-1) + 1*x(t) + x(t+1) + x(t+2) + x(t+3)]; x(t)= DDErrorA01_Mean1{p_end}
{txt}
{com}. 
. tssmooth ma DDErrorA01_Mean1_sm = DDErrorA01_Mean1_window, weights( 1 2 3 <4> 3 2 1) replace
{txt}The smoother applied was
{res}{p 5 5 5}(1/16)*[1*x(t-3) + 2*x(t-2) + 3*x(t-1) + 4*x(t) + 3*x(t+1) + 2*x(t+2) + ...; x(t)= DDErrorA01_Mean1_window
{txt}
{smcl}
{com}. 
. label var DDErrorA01_Mean1_sm "Daily deaths DELP average median errors smooth"
{txt}
{com}. 
. drop *_window
{txt}
{com}. 
. // drop provincestate_encoded
. 
. // tsset, clear
. 
. *
. 
. 
. 
. 
. ***************************************************************
. * graph 7 b Daily deaths, average median errors 
. 
. twoway ///
> (line DDErrorA01_Mean1_sm date, sort lcolor(red) lwidth(medium)) /// 
> if date >= td(01jan2020) & date <= td(01jan2022) ///
> , xtitle(Date) xlabel(#24, format(%tdYY-NN-DD) labsize(small)) xlabel(, grid) xlabel(, grid) ///
> xlabel(, angle(forty_five)) ylabel(, format(%15.0fc) labsize(small))  ylabel(, labsize(small) angle(horizontal)) ///
> ytitle(Daily deaths error measure) title("C19 daily deaths, average median errors", size(medium) color(black)) /// 
> subtitle("$country, DELP, forecast only; smoothed for better viewing", size(small)) xscale(lwidth(vthin) lcolor(gray*.2)) yscale(lwidth(vthin) lcolor(gray*.2)) ///
> xscale(lwidth(vthin) lcolor(gray*.2)) yscale(lwidth(vthin) lcolor(gray*.2)) legend(off) yscale(titlegap(3))
{res}{txt}
{com}. 
. qui graph export "graph 7 b C19 daily deaths error, $country, DELP, Error Mean1 smooth.pdf", replace
{txt}
{com}. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. ***************************************************************
. * graph 8 a Daily deaths, average median absolute errors 
. 
. twoway ///
> (line DDAbsErrA01_Mean1 date, sort lcolor(red) lwidth(medium)) /// 
> if date >= td(01jan2020) & date <= td(01jan2022) ///
> , xtitle(Date) xlabel(#24, format(%tdYY-NN-DD) labsize(small)) xlabel(, grid) xlabel(, grid) ///
> xlabel(, angle(forty_five)) ylabel(, format(%15.0fc) labsize(small))  ylabel(, labsize(small) angle(horizontal)) ///
> ytitle(Daily deaths error measure) title("C19 daily deaths, average median absolute errors", size(medium) color(black)) /// 
> subtitle("$country, DELP, forecast only", size(small)) xscale(lwidth(vthin) lcolor(gray*.2)) yscale(lwidth(vthin) lcolor(gray*.2)) ///
> xscale(lwidth(vthin) lcolor(gray*.2)) yscale(lwidth(vthin) lcolor(gray*.2)) legend(off) yscale(titlegap(3))
{res}{txt}
{com}. 
. qui graph export "graph 8 a C19 daily deaths error, $country, DELP, Absolute Error Mean1.pdf", replace
{txt}
{com}. 
. 
. 
. 
. 
. *********************
. * smooth median absolute error for better viewing 
. 
. // encode provincestate, gen(provincestate_encoded)
. 
. // tsset provincestate_encoded date, daily   
. 
. tssmooth ma DDAbsErrA01_Mean1_window = DDAbsErrA01_Mean1, window(3 1 3)
{txt}The smoother applied was
{res}{p 5 5 5}(1/7)*[x(t-3) + x(t-2) + x(t-1) + 1*x(t) + x(t+1) + x(t+2) + x(t+3)]; x(t)= DDAbsErrA01_Mean1{p_end}
{txt}
{com}. 
. tssmooth ma DDAbsErrA01_Mean1_sm = DDAbsErrA01_Mean1_window, weights( 1 2 3 <4> 3 2 1) replace
{txt}The smoother applied was
{res}{p 5 5 5}(1/16)*[1*x(t-3) + 2*x(t-2) + 3*x(t-1) + 4*x(t) + 3*x(t+1) + 2*x(t+2) + ...; x(t)= DDAbsErrA01_Mean1_window
{txt}
{smcl}
{com}. 
. label var DDAbsErrA01_Mean1_sm "Daily deaths DELP average median absolute errors smooth"
{txt}
{com}. 
. drop *_window
{txt}
{com}. 
. // drop provincestate_encoded
. 
. // tsset, clear
. 
. *
. 
. 
. 
. 
. 
. ***************************************************************
. * graph 8 b Daily deaths, average median absolute errors 
. 
. twoway ///
> (line DDAbsErrA01_Mean1_sm date, sort lcolor(red) lwidth(medium)) /// 
> if date >= td(01jan2020) & date <= td(01jan2022) ///
> , xtitle(Date) xlabel(#24, format(%tdYY-NN-DD) labsize(small)) xlabel(, grid) xlabel(, grid) ///
> xlabel(, angle(forty_five)) ylabel(, format(%15.0fc) labsize(small))  ylabel(, labsize(small) angle(horizontal)) ///
> ytitle(Daily deaths error measure) title("C19 daily deaths, average median absolute errors", size(medium) color(black)) /// 
> subtitle("$country, DELP, forecast only; smoothed for better viewing", size(small)) xscale(lwidth(vthin) lcolor(gray*.2)) yscale(lwidth(vthin) lcolor(gray*.2)) ///
> xscale(lwidth(vthin) lcolor(gray*.2)) yscale(lwidth(vthin) lcolor(gray*.2)) legend(off) yscale(titlegap(3))
{res}{txt}
{com}. 
. qui graph export "graph 8 b C19 daily deaths error, $country, DELP, Absolute Error Mean1 smooth.pdf", replace
{txt}
{com}. 
. 
. 
. 
. 
. 
. 
. ***************************************************************
. * graph 9 a Daily deaths, average median percent errors 
. 
. twoway ///
> (line DDPerErrA01_Mean1 date, sort lcolor(red) lwidth(medium)) /// 
> if date >= td(01jan2020) & date <= td(01jan2022) ///
> , xtitle(Date) xlabel(#24, format(%tdYY-NN-DD) labsize(small)) xlabel(, grid) xlabel(, grid) ///
> xlabel(, angle(forty_five)) ylabel(, format(%15.0fc) labsize(small))  ylabel(, labsize(small) angle(horizontal)) ///
> ytitle(Daily deaths error measure) title("C19 daily deaths, average median percent errors", size(medium) color(black)) /// 
> subtitle("$country, DELP, forecast only", size(small)) xscale(lwidth(vthin) lcolor(gray*.2)) yscale(lwidth(vthin) lcolor(gray*.2)) ///
> xscale(lwidth(vthin) lcolor(gray*.2)) yscale(lwidth(vthin) lcolor(gray*.2)) legend(off) yscale(titlegap(3))
{res}{txt}
{com}. 
. qui graph export "graph 9 a C19 daily deaths error, $country, DELP, % Error Mean1.pdf", replace
{txt}
{com}. 
. 
. 
. 
. *********************
. * smooth median percent error for better viewing 
. 
. // encode provincestate, gen(provincestate_encoded)
. 
. // tsset provincestate_encoded date, daily   
. 
. tssmooth ma DDPerErrA01_Mean1_window = DDPerErrA01_Mean1, window(3 1 3)
{txt}The smoother applied was
{res}{p 5 5 5}(1/7)*[x(t-3) + x(t-2) + x(t-1) + 1*x(t) + x(t+1) + x(t+2) + x(t+3)]; x(t)= DDPerErrA01_Mean1{p_end}
{txt}
{com}. 
. tssmooth ma DDPerErrA01_Mean1_sm = DDPerErrA01_Mean1_window, weights( 1 2 3 <4> 3 2 1) replace
{txt}The smoother applied was
{res}{p 5 5 5}(1/16)*[1*x(t-3) + 2*x(t-2) + 3*x(t-1) + 4*x(t) + 3*x(t+1) + 2*x(t+2) + ...; x(t)= DDPerErrA01_Mean1_window
{txt}
{smcl}
{com}. 
. label var DDPerErrA01_Mean1_sm "Daily deaths DELP average median percent errors smooth"
{txt}
{com}. 
. drop *_window
{txt}
{com}. 
. // drop provincestate_encoded
. 
. // tsset, clear
. 
. *
. 
. 
. 
. 
. 
. ***************************************************************
. * graph 9 b Daily deaths, average median percent errors 
. 
. twoway ///
> (line DDPerErrA01_Mean1_sm date, sort lcolor(red) lwidth(medium)) /// 
> if date >= td(01jan2020) & date <= td(01jan2022) ///
> , xtitle(Date) xlabel(#24, format(%tdYY-NN-DD) labsize(small)) xlabel(, grid) xlabel(, grid) ///
> xlabel(, angle(forty_five)) ylabel(, format(%15.0fc) labsize(small))  ylabel(, labsize(small) angle(horizontal)) ///
> ytitle(Daily deaths error measure) title("C19 daily deaths, average median percent errors", size(medium) color(black)) /// 
> subtitle("$country, DELP, forecast only; smoothed for better viewing", size(small)) xscale(lwidth(vthin) lcolor(gray*.2)) yscale(lwidth(vthin) lcolor(gray*.2)) ///
> xscale(lwidth(vthin) lcolor(gray*.2)) yscale(lwidth(vthin) lcolor(gray*.2)) legend(off) yscale(titlegap(3))
{res}{txt}
{com}. 
. qui graph export "graph 9 b C19 daily deaths error, $country, DELP, % Error Mean1 smooth.pdf", replace
{txt}
{com}. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. ***************************************************************
. * graph 10 a Daily deaths, average median absolute percent errors
. 
. twoway ///
> (line DDAbPeErA01_Mean1 date, sort lcolor(red) lwidth(medium)) /// 
> if date >= td(01jan2020) & date <= td(01jan2022) ///
> , xtitle(Date) xlabel(#24, format(%tdYY-NN-DD) labsize(small)) xlabel(, grid) xlabel(, grid) ///
> xlabel(, angle(forty_five)) ylabel(, format(%15.0fc) labsize(small))  ylabel(, labsize(small) angle(horizontal)) ///
> ytitle(Daily deaths error measure) title("C19 daily deaths, average median absolute percent errors", size(medium) color(black)) /// 
> subtitle("$country, DELP, forecast only", size(small)) xscale(lwidth(vthin) lcolor(gray*.2)) yscale(lwidth(vthin) lcolor(gray*.2)) ///
> xscale(lwidth(vthin) lcolor(gray*.2)) yscale(lwidth(vthin) lcolor(gray*.2)) legend(off) yscale(titlegap(3))
{res}{txt}
{com}. 
. qui graph export "graph 10 a C19 daily deaths error, $country, DELP, Absolute % Error Mean1.pdf", replace
{txt}
{com}. 
. 
. 
. 
. *********************
. * smooth median absolute % error for better viewing 
. 
. // encode provincestate, gen(provincestate_encoded)
. 
. // tsset provincestate_encoded date, daily   
. 
. tssmooth ma DDAbPeErA01_Mean1_window = DDAbPeErA01_Mean1, window(3 1 3)
{txt}The smoother applied was
{res}{p 5 5 5}(1/7)*[x(t-3) + x(t-2) + x(t-1) + 1*x(t) + x(t+1) + x(t+2) + x(t+3)]; x(t)= DDAbPeErA01_Mean1{p_end}
{txt}
{com}. 
. tssmooth ma DDAbPeErA01_Mean1_sm = DDAbPeErA01_Mean1_window, weights( 1 2 3 <4> 3 2 1) replace
{txt}The smoother applied was
{res}{p 5 5 5}(1/16)*[1*x(t-3) + 2*x(t-2) + 3*x(t-1) + 4*x(t) + 3*x(t+1) + 2*x(t+2) + ...; x(t)= DDAbPeErA01_Mean1_window
{txt}
{smcl}
{com}. 
. label var DDAbPeErA01_Mean1_sm "Daily deaths DELP average median absolute percent errors smooth"
{txt}
{com}. 
. drop *_window
{txt}
{com}. 
. drop provincestate_encoded
{txt}
{com}. 
. tsset, clear
{txt}
{com}. 
. *
. 
. 
. 
. ***************************************************************
. * graph 10 b Daily deaths, average median absolute percent errors, smooth
. 
. twoway ///
> (line DDAbPeErA01_Mean1_sm date, sort lcolor(red) lwidth(medium)) /// 
> if date >= td(01jan2020) & date <= td(01jan2022) ///
> , xtitle(Date) xlabel(#24, format(%tdYY-NN-DD) labsize(small)) xlabel(, grid) xlabel(, grid) ///
> xlabel(, angle(forty_five)) ylabel(, format(%15.0fc) labsize(small))  ylabel(, labsize(small) angle(horizontal)) ///
> ytitle(Daily deaths error measure) title("C19 daily deaths, average median absolute percent errors", size(medium) color(black)) /// 
> subtitle("$country, DELP, forecast only; smoothed for better viewing", size(small)) xscale(lwidth(vthin) lcolor(gray*.2)) yscale(lwidth(vthin) lcolor(gray*.2)) ///
> xscale(lwidth(vthin) lcolor(gray*.2)) yscale(lwidth(vthin) lcolor(gray*.2)) legend(off) yscale(titlegap(3))
{res}{txt}
{com}. 
. qui graph export "graph 10 b C19 daily deaths error, $country, DELP, Absolute % Error Mean1 smooth.pdf", replace
{txt}
{com}. 
. 
. 
. 
. 
. 
. 
. 
. ***********************************************
. 
. capture drop *2r
{txt}
{com}. 
. gen DDAbPeErA01_Mean2r = round(DDAbPeErA01_Mean2,0.1)
{txt}
{com}.     
. 
. * graph 11 Daily deaths, provinces together, Avergae of MAPE over updates and calendar months
. 
. graph bar ///
> (mean) DDAbPeErA01_Mean2r /// 
> , bar(1, fcolor(red) lcolor(red)) ///
> blabel(bar) ytitle("Average MAPE") yscale(titlegap(2)) ///
> title("C19 daily deaths average MAPE over updates and calendar months", size(medium) color(black)) ///
> subtitle("$country, DELP, forecast only. MAPE: Median Absolute Percent Error", size(small)) /// 
> legend(off) 
{res}{txt}
{com}. 
. qui graph export "graph 11 C19 daily deaths, $country, DELP, Average MAPE.pdf", replace
{txt}
{com}. 
. 
. 
. 
. 
. 
. 
. 
. ******
. 
. qui compress 
{txt}
{com}. 
. save "CovidLongitudinal DELP 2.dta", replace 
{txt}file CovidLongitudinal DELP 2.dta saved

{com}. 
. 
. 
. 
. 
. 
. view "log CovidLongitudinal DELP 5.smcl"
{txt}
{com}. 
. log close
      {txt}name:  {res}<unnamed>
       {txt}log:  {res}/Users/farshadpourmalek/Downloads/CovidLongitudinal-main/Iran/code/DELP/log CovidLongitudinal DELP 5.smcl
  {txt}log type:  {res}smcl
 {txt}closed on:  {res}16 May 2022, 12:01:28
{txt}{.-}
{smcl}
{txt}{sf}{ul off}