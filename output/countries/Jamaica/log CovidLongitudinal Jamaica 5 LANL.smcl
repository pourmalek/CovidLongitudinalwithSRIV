{smcl}
{com}{sf}{ul off}{txt}{.-}
      name:  {res}<unnamed>
       {txt}log:  {res}/Users/farshadpourmalek/Downloads/CovidLongitudinal-main/code/countries/Jamaica/log CovidLongitudinal Jamaica 5 LANL.smcl
  {txt}log type:  {res}smcl
 {txt}opened on:  {res}15 Aug 2023, 06:05:44
{txt}
{com}. 
. ***************************************************************************
. * This is "do CovidLongitudinal Jamaica 5 LANL.do"
. 
. * Project: Longitudinal assessment of COVID-19 models 
. 
. * Objective: Run calculations for error measures
.         * for each country ---->> Jamaica <<----                                                                 
. ***************************************************************************
. 
. 
. ** model = LANL ** <<-- modify 1
. * lcolor brown
. 
. * run calculations for error - daily deaths: four error types (graphs 3 to 11), updates together
. 
. 
. * input data files: "LANL Jamaica.dta"
. * output data files: "LANL Jamaica error.dta" (with error measures saved)
. 
. * output data dictionary files: "LANL Jamaica error data dictionary.csv"
. 
. 
. * graph 03 Error
. * graph 04 Absolute Error
. * graph 05 Percent Error
. * graph 06 Absolute Percent Error
. 
. * graph 07 mean over updates of median error by calendar months
. * graph 08 Daily deaths, mean over updates of median absolute error by calendar months
. * graph 09 Daily deaths, mean over updates of median % error by calendar months
. * graph 10 Daily deaths, mean over updates of median absolute % error by calendar months
. 
. * graph 11 Daily deaths, Average MAPE over updates and calendar months
. 
. 
. 
. 
. ** graphs:
. * "graph 03 Jamaica LANL C19 daily deaths error.pdf"
. * "graph 04 Jamaica LANL C19 daily deaths absolute error.pdf"
. * "graph 05 Jamaica LANL C19 daily deaths percent error.pdf"
. * "graph 06 Jamaica LANL C19 daily deaths absolute percent error.pdf"
. 
. * "graph 07 Jamaica LANL C19 daily deaths average median error.pdf"
. * "graph 08 Jamaica LANL C19 daily deaths average median absolute error.pdf"
. * "graph 09 Jamaica LANL C19 daily deaths average median percent error.pdf"
. * "graph 10 Jamaica LANL C19 daily deaths average median absolute percent error.pdf"
. 
. * "graph 11 Jamaica LANL C19 daily deaths Average MAPE over updates and calendar months
. 
. 
. *********************
. 
. /*
> 
> 
> CALCULATIONS:
> 
> Error = minus (Reference minus Model) 
> 
> Absolute error = | minus (Reference minus Model) |
> 
> Percent error = 100 * (minus (Reference minus Model)) / Reference
> 
> Absolute percent error = 100 * | minus (Reference minus Model) | / Reference
> 
> 
> 
> 
> Error = - (Reference - Model)
> 
> Absolute error = | - (Reference - Model) |
> 
> Percent error = 100 * (- (Reference - Model)) / Reference
> 
> Absolute percent error = 100 * | - (Reference - Model)| / Reference
> 
> */
. 
. 
. 
. 
. 
. 
. 
. use "LANL Jamaica.dta", clear 
{txt}
{com}. 
. 
. 
. 
. * gen months time bin
. 
. 
. gen month = month(date)
{txt}
{com}. 
. gen monthstr = ""
{txt}(1,143 missing values generated)

{com}. replace monthstr = "01" if month == 1
{txt}variable {bf}{res}monthstr{sf}{txt} was {bf}{res}str1{sf}{txt} now {bf}{res}str2{sf}
{txt}(103 real changes made)

{com}. replace monthstr = "02" if month == 2
{txt}(113 real changes made)

{com}. replace monthstr = "03" if month == 3
{txt}(102 real changes made)

{com}. 
. replace monthstr = "04" if month == 4
{txt}(90 real changes made)

{com}. replace monthstr = "05" if month == 5
{txt}(93 real changes made)

{com}. replace monthstr = "06" if month == 6
{txt}(90 real changes made)

{com}. 
. replace monthstr = "07" if month == 7
{txt}(93 real changes made)

{com}. replace monthstr = "08" if month == 8
{txt}(93 real changes made)

{com}. replace monthstr = "09" if month == 9
{txt}(90 real changes made)

{com}. 
. replace monthstr = "10" if month == 10
{txt}(93 real changes made)

{com}. replace monthstr = "11" if month == 11
{txt}(90 real changes made)

{com}. replace monthstr = "12" if month == 12
{txt}(93 real changes made)

{com}. 
. 
. 
. gen year = year(date)
{txt}
{com}. 
. gen yearstr = ""
{txt}(1,143 missing values generated)

{com}. replace yearstr = "2020" if year == 2020
{txt}variable {bf}{res}yearstr{sf}{txt} was {bf}{res}str1{sf}{txt} now {bf}{res}str4{sf}
{txt}(345 real changes made)

{com}. replace yearstr = "2021" if year == 2021
{txt}(365 real changes made)

{com}. replace yearstr = "2022" if year == 2022
{txt}(365 real changes made)

{com}. replace yearstr = "2023" if year == 2023
{txt}(68 real changes made)

{com}. 
. 
. egen yearmonth = concat(yearstr monthstr), p(m)
{txt}
{com}. 
. replace yearmonth = "" if yearmonth == "2023m01"
{txt}(31 real changes made)

{com}. 
. sort date yearmonth 
{txt}
{com}. 
. isid date
{txt}
{com}. 
. label var month "calendar month"
{txt}
{com}. 
. label var monthstr "calendar month string"
{txt}
{com}. 
. label var year "calendar year"
{txt}
{com}. 
. label var yearstr "calendar year string" 
{txt}
{com}. 
. label var yearmonth "calendar year and month"
{txt}
{com}. 
. *
. 
. 
. // <<-- modify 2
. 
. local list ///
> 20200830 ///
> 20200902 ///
> 20200906 ///
> 20200909 ///
> 20200913 ///
> 20200916 ///
> 20200920 ///
> 20200923 ///
> 20200927 ///
> 20200930 ///
> 20201004 ///
> 20201007 ///
> 20201011 ///
> 20201014 ///
> 20201018 ///
> 20201021 ///
> 20201025 ///
> 20201028 ///
> 20201101 ///
> 20201104 ///
> 20201108 ///
> 20201111 ///
> 20201115 ///
> 20201118 ///
> 20201122 ///
> 20201125 ///
> 20201129 ///
> 20201202 ///
> 20201206 ///
> 20201209 ///
> 20201213 ///
> 20201216 ///
> 20201220 ///
> 20201223 ///
> 20210103 ///
> 20210105 ///
> 20210110 ///
> 20210113 ///
> 20210117 ///
> 20210120 ///
> 20210124 ///
> 20210127 ///
> 20210131 ///
> 20210203 ///
> 20210207 ///
> 20210210 ///
> 20210214 ///
> 20210217 ///
> 20210221 ///
> 20210224 ///
> 20210228 ///
> 20210303 ///
> 20210307 ///
> 20210310 ///
> 20210314 ///
> 20210321 ///
> 20210324 ///
> 20210328 ///
> 20210331 ///
> 20210404 ///
> 20210407 ///
> 20210411 ///
> 20210414 ///
> 20210418 ///
> 20210421 ///
> 20210425 ///
> 20210428 ///
> 20210502 ///
> 20210505 ///
> 20210509 ///
> 20210512 ///
> 20210516 ///
> 20210519 ///
> 20210523 ///
> 20210526 ///
> 20210602 ///
> 20210606 ///
> 20210613 ///
> 20210620 ///
> 20210627 ///
> 20210704 ///
> 20210711 ///
> 20210718 ///
> 20210725 ///
> 20210801 ///
> 20210808 ///
> 20210815 ///
> 20210822 ///
> 20210829 ///
> 20210905 ///
> 20210912 ///
> 20210919 ///
> 20210926
{txt}
{com}. 
. 
. sort date
{txt}
{com}. 
. 
. * (1) gen error TYPES by calendar months and model updates
. 
. foreach update of local list {c -(}
{txt}  2{com}. 
.         * Running not quietly displays that the Stata is working and has not frozen. 
. 
. capture drop DDErrorLANL`update'
{txt}  3{com}. gen DDErrorLANL`update' = - (DayDeaMeSmJOHN - DayDeaMeFoLANL`update')
{txt}  4{com}. label var DDErrorLANL`update' "DayDeaMeFoLANL`update' error"
{txt}  5{com}. qui replace DDErrorLANL`update' = . if DayDeaMeSmJOHN == . // before location was added to the estimates for the country
{txt}  6{com}. qui replace DDErrorLANL`update' = . if date == td(01jan2023) // 01jan2023 is not included in this study
{txt}  7{com}. qui replace DDErrorLANL`update' = . if date < td(30aug2020) // 30aug2020 is the earliest date of LANL forecasts for Jamaica
{txt}  8{com}.                                                             // <<-- modify 3
. capture drop DDAbsErrLANL`update'
{txt}  9{com}. gen DDAbsErrLANL`update' = abs(- (DayDeaMeSmJOHN - DayDeaMeFoLANL`update'))
{txt} 10{com}. label var DDAbsErrLANL`update' "DayDeaMeFoLANL`update' absolute error"
{txt} 11{com}. qui replace DDAbsErrLANL`update' = . if DayDeaMeSmJOHN == . // before location was added to the estimates for the country
{txt} 12{com}. qui replace DDAbsErrLANL`update' = . if date == td(01jan2023) // 01jan2023 is not included in this study
{txt} 13{com}. qui replace DDAbsErrLANL`update' = . if date < td(30aug2020) // 30aug2020 is the earliest date of LANL forecasts for Jamaica
{txt} 14{com}. 
. capture drop DDPerErrLANL`update'
{txt} 15{com}. gen DDPerErrLANL`update' = (100 * (- (DayDeaMeSmJOHN - DayDeaMeFoLANL`update'))) / DayDeaMeSmJOHN
{txt} 16{com}. label var DDPerErrLANL`update' "DayDeaMeFoLANL`update' percent error"
{txt} 17{com}. qui replace DDPerErrLANL`update' = . if DayDeaMeSmJOHN == . // before location was added to the estimates for the country
{txt} 18{com}. qui replace DDPerErrLANL`update' = . if date == td(01jan2023) // 01jan2023 is not included in this study
{txt} 19{com}. qui replace DDPerErrLANL`update' = . if date < td(30aug2020) // 30aug2020 is the earliest date of LANL forecasts for Jamaica
{txt} 20{com}. 
. capture drop DDAbPeErLANL`update'
{txt} 21{com}. gen DDAbPeErLANL`update' = (100 * abs(- (DayDeaMeSmJOHN - DayDeaMeFoLANL`update'))) / DayDeaMeSmJOHN
{txt} 22{com}. label var DDAbPeErLANL`update' "DayDeaMeFoLANL`update' absolute percent error" 
{txt} 23{com}. qui replace DDAbPeErLANL`update' = . if DayDeaMeSmJOHN == . // before location was added to the estimates for the country
{txt} 24{com}. qui replace DDAbPeErLANL`update' = . if date == td(01jan2023) // 01jan2023 is not included in this study
{txt} 25{com}. qui replace DDAbPeErLANL`update' = . if date < td(30aug2020) // 30aug2020 is the earliest date of LANL forecasts for Jamaica
{txt} 26{com}. 
. {c )-}
{txt}(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)
(1,094 missing values generated)

{com}. *
. 
. 
. 
. 
. 
. * (2) gen MEDIAN of error types by calendar months and updates = _Med1
. 
. * Wait note: wait ...
. 
. foreach update of local list {c -(}
{txt}  2{com}.                 
. capture drop DDErrorLANL`update'_Med1
{txt}  3{com}. bysort yearmonth : egen DDErrorLANL`update'_Med1 = median(DDErrorLANL`update')
{txt}  4{com}. label var DDErrorLANL`update'_Med1 "DayDeaLANL median error by calendar months and updates"
{txt}  5{com}. qui replace DDErrorLANL`update'_Med1 = . if DayDeaMeSmJOHN == . // before location was added to the estimates for the country
{txt}  6{com}. qui replace DDErrorLANL`update'_Med1 = . if date == td(01jan2023) // 01jan2023 is not included in this study
{txt}  7{com}. qui replace DDErrorLANL`update'_Med1 = . if date < td(30aug2020) // 30aug2020 is the earliest date of LANL forecasts for Jamaica
{txt}  8{com}. 
. capture drop DDAbsErrLANL`update'_Med1
{txt}  9{com}. bysort yearmonth : egen DDAbsErrLANL`update'_Med1 = median(DDAbsErrLANL`update')
{txt} 10{com}. label var DDAbsErrLANL`update'_Med1 "DayDeaLANL median absolute error by calendar months and updates"
{txt} 11{com}. qui replace DDAbsErrLANL`update'_Med1 = . if DayDeaMeSmJOHN == . // before location was added to the estimates for the country
{txt} 12{com}. qui replace DDAbsErrLANL`update'_Med1 = . if date == td(01jan2023) // 01jan2023 is not included in this study
{txt} 13{com}. qui replace DDAbsErrLANL`update'_Med1 = . if date < td(30aug2020) // 30aug2020 is the earliest date of LANL forecasts for Jamaica
{txt} 14{com}. 
. capture drop DDPerErrLANL`update'_Med1
{txt} 15{com}. bysort yearmonth : egen DDPerErrLANL`update'_Med1 = median(DDPerErrLANL`update')
{txt} 16{com}. label var DDPerErrLANL`update'_Med1 "DayDeaLANL median % error by calendar months and updates"
{txt} 17{com}. qui replace DDPerErrLANL`update'_Med1 = . if DayDeaMeSmJOHN == . // before location was added to the estimates for the country
{txt} 18{com}. qui replace DDPerErrLANL`update'_Med1 = . if date == td(01jan2023) // 01jan2023 is not included in this study
{txt} 19{com}. qui replace DDPerErrLANL`update'_Med1 = . if date < td(30aug2020) // 30aug2020 is the earliest date of LANL forecasts for Jamaica
{txt} 20{com}. 
. capture drop DDAbPeErLANL`update'_Med1
{txt} 21{com}. bysort yearmonth : egen DDAbPeErLANL`update'_Med1 = median(DDAbPeErLANL`update')
{txt} 22{com}. label var DDAbPeErLANL`update'_Med1 "DayDeaLANL median absolute % error by calendar months and updates" 
{txt} 23{com}. qui replace DDAbPeErLANL`update'_Med1 = . if DayDeaMeSmJOHN == . // before location was added to the estimates for the country
{txt} 24{com}. qui replace DDAbPeErLANL`update'_Med1 = . if date == td(01jan2023) // 01jan2023 is not included in this study
{txt} 25{com}. qui replace DDAbPeErLANL`update'_Med1 = . if date < td(30aug2020) // 30aug2020 is the earliest date of LANL forecasts for Jamaica
{txt} 26{com}. 
. {c )-}
{txt}(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,081 missing values generated)
(1,081 missing values generated)
(1,081 missing values generated)
(1,081 missing values generated)
(1,081 missing values generated)
(1,081 missing values generated)
(1,081 missing values generated)
(1,081 missing values generated)
(1,081 missing values generated)
(1,081 missing values generated)
(1,081 missing values generated)
(1,081 missing values generated)
(1,081 missing values generated)
(1,081 missing values generated)
(1,081 missing values generated)
(1,081 missing values generated)
(1,053 missing values generated)
(1,053 missing values generated)
(1,053 missing values generated)
(1,053 missing values generated)
(1,053 missing values generated)
(1,053 missing values generated)
(1,053 missing values generated)
(1,053 missing values generated)
(1,053 missing values generated)
(1,053 missing values generated)
(1,053 missing values generated)
(1,053 missing values generated)
(1,084 missing values generated)
(1,084 missing values generated)
(1,084 missing values generated)
(1,084 missing values generated)
(1,084 missing values generated)
(1,084 missing values generated)
(1,084 missing values generated)
(1,084 missing values generated)
(1,084 missing values generated)
(1,084 missing values generated)
(1,084 missing values generated)
(1,084 missing values generated)
(1,053 missing values generated)
(1,053 missing values generated)
(1,053 missing values generated)
(1,053 missing values generated)
(1,053 missing values generated)
(1,053 missing values generated)
(1,053 missing values generated)
(1,053 missing values generated)
(1,053 missing values generated)
(1,053 missing values generated)
(1,053 missing values generated)
(1,053 missing values generated)
(1,053 missing values generated)
(1,053 missing values generated)
(1,053 missing values generated)
(1,053 missing values generated)
(1,053 missing values generated)
(1,053 missing values generated)
(1,053 missing values generated)
(1,053 missing values generated)
(1,053 missing values generated)
(1,053 missing values generated)
(1,053 missing values generated)
(1,053 missing values generated)
(1,084 missing values generated)
(1,084 missing values generated)
(1,084 missing values generated)
(1,084 missing values generated)
(1,084 missing values generated)
(1,084 missing values generated)
(1,084 missing values generated)
(1,084 missing values generated)
(1,084 missing values generated)
(1,084 missing values generated)
(1,084 missing values generated)
(1,084 missing values generated)
(1,054 missing values generated)
(1,054 missing values generated)
(1,054 missing values generated)
(1,054 missing values generated)
(1,054 missing values generated)
(1,054 missing values generated)
(1,054 missing values generated)
(1,054 missing values generated)
(1,054 missing values generated)
(1,054 missing values generated)
(1,054 missing values generated)
(1,054 missing values generated)
(1,054 missing values generated)
(1,054 missing values generated)
(1,054 missing values generated)
(1,054 missing values generated)
(1,054 missing values generated)
(1,054 missing values generated)
(1,054 missing values generated)
(1,054 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,081 missing values generated)
(1,081 missing values generated)
(1,081 missing values generated)
(1,081 missing values generated)
(1,081 missing values generated)
(1,081 missing values generated)
(1,081 missing values generated)
(1,081 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,051 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,082 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)
(1,052 missing values generated)

{com}. *
. 
. 
. 
.  
. * (3) gen AVERAGE over updates of MEDIAN of error types by calendar months = _Mean1
. 
. * Wait note: wait ...
. 
. 
. 
. * gen DDErrorLANL_Mean1 // gen AVERAGE over updates of MEDIAN of error types by calendar months
. 
.  // <<-- modify 4
.  
. order DDErrorLANL20200830_Med1
{txt}
{com}. order DDErrorLANL20200902_Med1
{txt}
{com}. order DDErrorLANL20200906_Med1
{txt}
{com}. order DDErrorLANL20200909_Med1
{txt}
{com}. order DDErrorLANL20200913_Med1
{txt}
{com}. order DDErrorLANL20200916_Med1
{txt}
{com}. order DDErrorLANL20200920_Med1
{txt}
{com}. order DDErrorLANL20200923_Med1
{txt}
{com}. order DDErrorLANL20200927_Med1
{txt}
{com}. order DDErrorLANL20200930_Med1
{txt}
{com}. order DDErrorLANL20201004_Med1
{txt}
{com}. order DDErrorLANL20201007_Med1
{txt}
{com}. order DDErrorLANL20201011_Med1
{txt}
{com}. order DDErrorLANL20201014_Med1
{txt}
{com}. order DDErrorLANL20201018_Med1
{txt}
{com}. order DDErrorLANL20201021_Med1
{txt}
{com}. order DDErrorLANL20201025_Med1
{txt}
{com}. order DDErrorLANL20201028_Med1
{txt}
{com}. order DDErrorLANL20201101_Med1
{txt}
{com}. order DDErrorLANL20201104_Med1
{txt}
{com}. order DDErrorLANL20201108_Med1
{txt}
{com}. order DDErrorLANL20201111_Med1
{txt}
{com}. order DDErrorLANL20201115_Med1
{txt}
{com}. order DDErrorLANL20201118_Med1
{txt}
{com}. order DDErrorLANL20201122_Med1
{txt}
{com}. order DDErrorLANL20201125_Med1
{txt}
{com}. order DDErrorLANL20201129_Med1
{txt}
{com}. order DDErrorLANL20201202_Med1
{txt}
{com}. order DDErrorLANL20201206_Med1
{txt}
{com}. order DDErrorLANL20201209_Med1
{txt}
{com}. order DDErrorLANL20201213_Med1
{txt}
{com}. order DDErrorLANL20201216_Med1
{txt}
{com}. order DDErrorLANL20201220_Med1
{txt}
{com}. order DDErrorLANL20201223_Med1
{txt}
{com}. order DDErrorLANL20210103_Med1
{txt}
{com}. order DDErrorLANL20210105_Med1
{txt}
{com}. order DDErrorLANL20210110_Med1
{txt}
{com}. order DDErrorLANL20210113_Med1
{txt}
{com}. order DDErrorLANL20210117_Med1
{txt}
{com}. order DDErrorLANL20210120_Med1
{txt}
{com}. order DDErrorLANL20210124_Med1
{txt}
{com}. order DDErrorLANL20210127_Med1
{txt}
{com}. order DDErrorLANL20210131_Med1
{txt}
{com}. order DDErrorLANL20210203_Med1
{txt}
{com}. order DDErrorLANL20210207_Med1
{txt}
{com}. order DDErrorLANL20210210_Med1
{txt}
{com}. order DDErrorLANL20210214_Med1
{txt}
{com}. order DDErrorLANL20210217_Med1
{txt}
{com}. order DDErrorLANL20210221_Med1
{txt}
{com}. order DDErrorLANL20210224_Med1
{txt}
{com}. order DDErrorLANL20210228_Med1
{txt}
{com}. order DDErrorLANL20210303_Med1
{txt}
{com}. order DDErrorLANL20210307_Med1
{txt}
{com}. order DDErrorLANL20210310_Med1
{txt}
{com}. order DDErrorLANL20210314_Med1
{txt}
{com}. order DDErrorLANL20210321_Med1
{txt}
{com}. order DDErrorLANL20210324_Med1
{txt}
{com}. order DDErrorLANL20210328_Med1
{txt}
{com}. order DDErrorLANL20210331_Med1
{txt}
{com}. order DDErrorLANL20210404_Med1
{txt}
{com}. order DDErrorLANL20210407_Med1
{txt}
{com}. order DDErrorLANL20210411_Med1
{txt}
{com}. order DDErrorLANL20210414_Med1
{txt}
{com}. order DDErrorLANL20210418_Med1
{txt}
{com}. order DDErrorLANL20210421_Med1
{txt}
{com}. order DDErrorLANL20210425_Med1
{txt}
{com}. order DDErrorLANL20210428_Med1
{txt}
{com}. order DDErrorLANL20210502_Med1
{txt}
{com}. order DDErrorLANL20210505_Med1
{txt}
{com}. order DDErrorLANL20210509_Med1
{txt}
{com}. order DDErrorLANL20210512_Med1
{txt}
{com}. order DDErrorLANL20210516_Med1
{txt}
{com}. order DDErrorLANL20210519_Med1
{txt}
{com}. order DDErrorLANL20210523_Med1
{txt}
{com}. order DDErrorLANL20210526_Med1
{txt}
{com}. order DDErrorLANL20210602_Med1
{txt}
{com}. order DDErrorLANL20210606_Med1
{txt}
{com}. order DDErrorLANL20210613_Med1
{txt}
{com}. order DDErrorLANL20210620_Med1
{txt}
{com}. order DDErrorLANL20210627_Med1
{txt}
{com}. order DDErrorLANL20210704_Med1
{txt}
{com}. order DDErrorLANL20210711_Med1
{txt}
{com}. order DDErrorLANL20210718_Med1
{txt}
{com}. order DDErrorLANL20210725_Med1
{txt}
{com}. order DDErrorLANL20210801_Med1
{txt}
{com}. order DDErrorLANL20210808_Med1
{txt}
{com}. order DDErrorLANL20210815_Med1
{txt}
{com}. order DDErrorLANL20210822_Med1
{txt}
{com}. order DDErrorLANL20210829_Med1
{txt}
{com}. order DDErrorLANL20210905_Med1
{txt}
{com}. order DDErrorLANL20210912_Med1
{txt}
{com}. order DDErrorLANL20210919_Med1
{txt}
{com}. order DDErrorLANL20210926_Med1
{txt}
{com}. 
.                 
. capture drop DDErrorLANL_Mean1 // "DDErrorLANL mean over updates of median error by calendar months"
{txt}
{com}. egen DDErrorLANL_Mean1 = rowmean(DDErrorLANL20210926_Med1-DDErrorLANL20200830_Med1) // <<-- modify 5
{txt}(685 missing values generated)

{com}. label var DDErrorLANL_Mean1 "DDErrorLANL mean over updates of median error by calendar months"
{txt}
{com}. qui replace DDErrorLANL_Mean1 = . if DayDeaMeSmJOHN == . // before location was added to the estimates for the country
{txt}
{com}. qui replace DDErrorLANL_Mean1 = . if date == td(01jan2023) // 01jan2023 is not included in this study
{txt}
{com}. qui replace DDErrorLANL_Mean1 = . if date < td(30aug2020) // 30aug2020 is the earliest date of LANL forecasts for Jamaica
{txt}
{com}. 
. 
. 
. 
. 
. 
. * gen DDAbsErrLANL_Mean1 // gen AVERAGE over updates of MEDIAN of error types by calendar months
. 
.  // <<-- modify 6
.  
. order DDAbsErrLANL20200830_Med1
{txt}
{com}. order DDAbsErrLANL20200902_Med1
{txt}
{com}. order DDAbsErrLANL20200906_Med1
{txt}
{com}. order DDAbsErrLANL20200909_Med1
{txt}
{com}. order DDAbsErrLANL20200913_Med1
{txt}
{com}. order DDAbsErrLANL20200916_Med1
{txt}
{com}. order DDAbsErrLANL20200920_Med1
{txt}
{com}. order DDAbsErrLANL20200923_Med1
{txt}
{com}. order DDAbsErrLANL20200927_Med1
{txt}
{com}. order DDAbsErrLANL20200930_Med1
{txt}
{com}. order DDAbsErrLANL20201004_Med1
{txt}
{com}. order DDAbsErrLANL20201007_Med1
{txt}
{com}. order DDAbsErrLANL20201011_Med1
{txt}
{com}. order DDAbsErrLANL20201014_Med1
{txt}
{com}. order DDAbsErrLANL20201018_Med1
{txt}
{com}. order DDAbsErrLANL20201021_Med1
{txt}
{com}. order DDAbsErrLANL20201025_Med1
{txt}
{com}. order DDAbsErrLANL20201028_Med1
{txt}
{com}. order DDAbsErrLANL20201101_Med1
{txt}
{com}. order DDAbsErrLANL20201104_Med1
{txt}
{com}. order DDAbsErrLANL20201108_Med1
{txt}
{com}. order DDAbsErrLANL20201111_Med1
{txt}
{com}. order DDAbsErrLANL20201115_Med1
{txt}
{com}. order DDAbsErrLANL20201118_Med1
{txt}
{com}. order DDAbsErrLANL20201122_Med1
{txt}
{com}. order DDAbsErrLANL20201125_Med1
{txt}
{com}. order DDAbsErrLANL20201129_Med1
{txt}
{com}. order DDAbsErrLANL20201202_Med1
{txt}
{com}. order DDAbsErrLANL20201206_Med1
{txt}
{com}. order DDAbsErrLANL20201209_Med1
{txt}
{com}. order DDAbsErrLANL20201213_Med1
{txt}
{com}. order DDAbsErrLANL20201216_Med1
{txt}
{com}. order DDAbsErrLANL20201220_Med1
{txt}
{com}. order DDAbsErrLANL20201223_Med1
{txt}
{com}. order DDAbsErrLANL20210103_Med1
{txt}
{com}. order DDAbsErrLANL20210105_Med1
{txt}
{com}. order DDAbsErrLANL20210110_Med1
{txt}
{com}. order DDAbsErrLANL20210113_Med1
{txt}
{com}. order DDAbsErrLANL20210117_Med1
{txt}
{com}. order DDAbsErrLANL20210120_Med1
{txt}
{com}. order DDAbsErrLANL20210124_Med1
{txt}
{com}. order DDAbsErrLANL20210127_Med1
{txt}
{com}. order DDAbsErrLANL20210131_Med1
{txt}
{com}. order DDAbsErrLANL20210203_Med1
{txt}
{com}. order DDAbsErrLANL20210207_Med1
{txt}
{com}. order DDAbsErrLANL20210210_Med1
{txt}
{com}. order DDAbsErrLANL20210214_Med1
{txt}
{com}. order DDAbsErrLANL20210217_Med1
{txt}
{com}. order DDAbsErrLANL20210221_Med1
{txt}
{com}. order DDAbsErrLANL20210224_Med1
{txt}
{com}. order DDAbsErrLANL20210228_Med1
{txt}
{com}. order DDAbsErrLANL20210303_Med1
{txt}
{com}. order DDAbsErrLANL20210307_Med1
{txt}
{com}. order DDAbsErrLANL20210310_Med1
{txt}
{com}. order DDAbsErrLANL20210314_Med1
{txt}
{com}. order DDAbsErrLANL20210321_Med1
{txt}
{com}. order DDAbsErrLANL20210324_Med1
{txt}
{com}. order DDAbsErrLANL20210328_Med1
{txt}
{com}. order DDAbsErrLANL20210331_Med1
{txt}
{com}. order DDAbsErrLANL20210404_Med1
{txt}
{com}. order DDAbsErrLANL20210407_Med1
{txt}
{com}. order DDAbsErrLANL20210411_Med1
{txt}
{com}. order DDAbsErrLANL20210414_Med1
{txt}
{com}. order DDAbsErrLANL20210418_Med1
{txt}
{com}. order DDAbsErrLANL20210421_Med1
{txt}
{com}. order DDAbsErrLANL20210425_Med1
{txt}
{com}. order DDAbsErrLANL20210428_Med1
{txt}
{com}. order DDAbsErrLANL20210502_Med1
{txt}
{com}. order DDAbsErrLANL20210505_Med1
{txt}
{com}. order DDAbsErrLANL20210509_Med1
{txt}
{com}. order DDAbsErrLANL20210512_Med1
{txt}
{com}. order DDAbsErrLANL20210516_Med1
{txt}
{com}. order DDAbsErrLANL20210519_Med1
{txt}
{com}. order DDAbsErrLANL20210523_Med1
{txt}
{com}. order DDAbsErrLANL20210526_Med1
{txt}
{com}. order DDAbsErrLANL20210602_Med1
{txt}
{com}. order DDAbsErrLANL20210606_Med1
{txt}
{com}. order DDAbsErrLANL20210613_Med1
{txt}
{com}. order DDAbsErrLANL20210620_Med1
{txt}
{com}. order DDAbsErrLANL20210627_Med1
{txt}
{com}. order DDAbsErrLANL20210704_Med1
{txt}
{com}. order DDAbsErrLANL20210711_Med1
{txt}
{com}. order DDAbsErrLANL20210718_Med1
{txt}
{com}. order DDAbsErrLANL20210725_Med1
{txt}
{com}. order DDAbsErrLANL20210801_Med1
{txt}
{com}. order DDAbsErrLANL20210808_Med1
{txt}
{com}. order DDAbsErrLANL20210815_Med1
{txt}
{com}. order DDAbsErrLANL20210822_Med1
{txt}
{com}. order DDAbsErrLANL20210829_Med1
{txt}
{com}. order DDAbsErrLANL20210905_Med1
{txt}
{com}. order DDAbsErrLANL20210912_Med1
{txt}
{com}. order DDAbsErrLANL20210919_Med1
{txt}
{com}. order DDAbsErrLANL20210926_Med1
{txt}
{com}. 
. 
. capture drop DDAbsErrLANL_Mean1 // "DDAbsErrLANL mean over updates of median absolute error by calendar months"
{txt}
{com}. egen DDAbsErrLANL_Mean1 = rowmean(DDAbsErrLANL20210926_Med1-DDAbsErrLANL20200830_Med1) // <<-- modify 7
{txt}(685 missing values generated)

{com}. label var DDAbsErrLANL_Mean1 "DDAbsErrLANL mean over updates of median absolute error by calendar months"
{txt}
{com}. qui replace DDAbsErrLANL_Mean1 = . if DayDeaMeSmJOHN == . // before location was added to the estimates for the country
{txt}
{com}. qui replace DDAbsErrLANL_Mean1 = . if date == td(01jan2023) // 01jan2023 is not included in this study
{txt}
{com}. qui replace DDAbsErrLANL_Mean1 = . if date < td(30aug2020) // 30aug2020 is the earliest date of LANL forecasts for Jamaica
{txt}
{com}. 
. 
. 
. 
. 
. 
. 
. * gen DDPerErrLANL_Mean1 // gen AVERAGE over updates of MEDIAN of error types by calendar months
. 
. // <<-- modify 8
. 
. order DDPerErrLANL20200830_Med1
{txt}
{com}. order DDPerErrLANL20200902_Med1
{txt}
{com}. order DDPerErrLANL20200906_Med1
{txt}
{com}. order DDPerErrLANL20200909_Med1
{txt}
{com}. order DDPerErrLANL20200913_Med1
{txt}
{com}. order DDPerErrLANL20200916_Med1
{txt}
{com}. order DDPerErrLANL20200920_Med1
{txt}
{com}. order DDPerErrLANL20200923_Med1
{txt}
{com}. order DDPerErrLANL20200927_Med1
{txt}
{com}. order DDPerErrLANL20200930_Med1
{txt}
{com}. order DDPerErrLANL20201004_Med1
{txt}
{com}. order DDPerErrLANL20201007_Med1
{txt}
{com}. order DDPerErrLANL20201011_Med1
{txt}
{com}. order DDPerErrLANL20201014_Med1
{txt}
{com}. order DDPerErrLANL20201018_Med1
{txt}
{com}. order DDPerErrLANL20201021_Med1
{txt}
{com}. order DDPerErrLANL20201025_Med1
{txt}
{com}. order DDPerErrLANL20201028_Med1
{txt}
{com}. order DDPerErrLANL20201101_Med1
{txt}
{com}. order DDPerErrLANL20201104_Med1
{txt}
{com}. order DDPerErrLANL20201108_Med1
{txt}
{com}. order DDPerErrLANL20201111_Med1
{txt}
{com}. order DDPerErrLANL20201115_Med1
{txt}
{com}. order DDPerErrLANL20201118_Med1
{txt}
{com}. order DDPerErrLANL20201122_Med1
{txt}
{com}. order DDPerErrLANL20201125_Med1
{txt}
{com}. order DDPerErrLANL20201129_Med1
{txt}
{com}. order DDPerErrLANL20201202_Med1
{txt}
{com}. order DDPerErrLANL20201206_Med1
{txt}
{com}. order DDPerErrLANL20201209_Med1
{txt}
{com}. order DDPerErrLANL20201213_Med1
{txt}
{com}. order DDPerErrLANL20201216_Med1
{txt}
{com}. order DDPerErrLANL20201220_Med1
{txt}
{com}. order DDPerErrLANL20201223_Med1
{txt}
{com}. order DDPerErrLANL20210103_Med1
{txt}
{com}. order DDPerErrLANL20210105_Med1
{txt}
{com}. order DDPerErrLANL20210110_Med1
{txt}
{com}. order DDPerErrLANL20210113_Med1
{txt}
{com}. order DDPerErrLANL20210117_Med1
{txt}
{com}. order DDPerErrLANL20210120_Med1
{txt}
{com}. order DDPerErrLANL20210124_Med1
{txt}
{com}. order DDPerErrLANL20210127_Med1
{txt}
{com}. order DDPerErrLANL20210131_Med1
{txt}
{com}. order DDPerErrLANL20210203_Med1
{txt}
{com}. order DDPerErrLANL20210207_Med1
{txt}
{com}. order DDPerErrLANL20210210_Med1
{txt}
{com}. order DDPerErrLANL20210214_Med1
{txt}
{com}. order DDPerErrLANL20210217_Med1
{txt}
{com}. order DDPerErrLANL20210221_Med1
{txt}
{com}. order DDPerErrLANL20210224_Med1
{txt}
{com}. order DDPerErrLANL20210228_Med1
{txt}
{com}. order DDPerErrLANL20210303_Med1
{txt}
{com}. order DDPerErrLANL20210307_Med1
{txt}
{com}. order DDPerErrLANL20210310_Med1
{txt}
{com}. order DDPerErrLANL20210314_Med1
{txt}
{com}. order DDPerErrLANL20210321_Med1
{txt}
{com}. order DDPerErrLANL20210324_Med1
{txt}
{com}. order DDPerErrLANL20210328_Med1
{txt}
{com}. order DDPerErrLANL20210331_Med1
{txt}
{com}. order DDPerErrLANL20210404_Med1
{txt}
{com}. order DDPerErrLANL20210407_Med1
{txt}
{com}. order DDPerErrLANL20210411_Med1
{txt}
{com}. order DDPerErrLANL20210414_Med1
{txt}
{com}. order DDPerErrLANL20210418_Med1
{txt}
{com}. order DDPerErrLANL20210421_Med1
{txt}
{com}. order DDPerErrLANL20210425_Med1
{txt}
{com}. order DDPerErrLANL20210428_Med1
{txt}
{com}. order DDPerErrLANL20210502_Med1
{txt}
{com}. order DDPerErrLANL20210505_Med1
{txt}
{com}. order DDPerErrLANL20210509_Med1
{txt}
{com}. order DDPerErrLANL20210512_Med1
{txt}
{com}. order DDPerErrLANL20210516_Med1
{txt}
{com}. order DDPerErrLANL20210519_Med1
{txt}
{com}. order DDPerErrLANL20210523_Med1
{txt}
{com}. order DDPerErrLANL20210526_Med1
{txt}
{com}. order DDPerErrLANL20210602_Med1
{txt}
{com}. order DDPerErrLANL20210606_Med1
{txt}
{com}. order DDPerErrLANL20210613_Med1
{txt}
{com}. order DDPerErrLANL20210620_Med1
{txt}
{com}. order DDPerErrLANL20210627_Med1
{txt}
{com}. order DDPerErrLANL20210704_Med1
{txt}
{com}. order DDPerErrLANL20210711_Med1
{txt}
{com}. order DDPerErrLANL20210718_Med1
{txt}
{com}. order DDPerErrLANL20210725_Med1
{txt}
{com}. order DDPerErrLANL20210801_Med1
{txt}
{com}. order DDPerErrLANL20210808_Med1
{txt}
{com}. order DDPerErrLANL20210815_Med1
{txt}
{com}. order DDPerErrLANL20210822_Med1
{txt}
{com}. order DDPerErrLANL20210829_Med1
{txt}
{com}. order DDPerErrLANL20210905_Med1
{txt}
{com}. order DDPerErrLANL20210912_Med1
{txt}
{com}. order DDPerErrLANL20210919_Med1
{txt}
{com}. order DDPerErrLANL20210926_Med1
{txt}
{com}. 
. 
. capture drop DDPerErrLANL_Mean1 // "DDPerErrLANL mean over updates of median absolute % error by calendar months"
{txt}
{com}. egen DDPerErrLANL_Mean1 = rowmean(DDPerErrLANL20210926_Med1-DDPerErrLANL20200830_Med1) // <<-- modify 9
{txt}(685 missing values generated)

{com}. label var DDPerErrLANL_Mean1 "DDPerErrLANL mean over updates of median % error by calendar months"
{txt}
{com}. qui replace DDPerErrLANL_Mean1 = . if DayDeaMeSmJOHN == . // before location was added to the estimates for the country
{txt}
{com}. qui replace DDPerErrLANL_Mean1 = . if date == td(01jan2023) // 01jan2023 is not included in this study
{txt}
{com}. qui replace DDPerErrLANL_Mean1 = . if date < td(30aug2020) // 30aug2020 is the earliest date of LANL forecasts for Jamaica
{txt}
{com}. 
.  
.  
.  
. 
. * gen DDAbPeErLANL_Mean1 // gen AVERAGE over updates of MEDIAN of error types by calendar months
. 
.  // <<-- modify 10
.  
. 
. order DDAbPeErLANL20200830_Med1
{txt}
{com}. order DDAbPeErLANL20200902_Med1
{txt}
{com}. order DDAbPeErLANL20200906_Med1
{txt}
{com}. order DDAbPeErLANL20200909_Med1
{txt}
{com}. order DDAbPeErLANL20200913_Med1
{txt}
{com}. order DDAbPeErLANL20200916_Med1
{txt}
{com}. order DDAbPeErLANL20200920_Med1
{txt}
{com}. order DDAbPeErLANL20200923_Med1
{txt}
{com}. order DDAbPeErLANL20200927_Med1
{txt}
{com}. order DDAbPeErLANL20200930_Med1
{txt}
{com}. order DDAbPeErLANL20201004_Med1
{txt}
{com}. order DDAbPeErLANL20201007_Med1
{txt}
{com}. order DDAbPeErLANL20201011_Med1
{txt}
{com}. order DDAbPeErLANL20201014_Med1
{txt}
{com}. order DDAbPeErLANL20201018_Med1
{txt}
{com}. order DDAbPeErLANL20201021_Med1
{txt}
{com}. order DDAbPeErLANL20201025_Med1
{txt}
{com}. order DDAbPeErLANL20201028_Med1
{txt}
{com}. order DDAbPeErLANL20201101_Med1
{txt}
{com}. order DDAbPeErLANL20201104_Med1
{txt}
{com}. order DDAbPeErLANL20201108_Med1
{txt}
{com}. order DDAbPeErLANL20201111_Med1
{txt}
{com}. order DDAbPeErLANL20201115_Med1
{txt}
{com}. order DDAbPeErLANL20201118_Med1
{txt}
{com}. order DDAbPeErLANL20201122_Med1
{txt}
{com}. order DDAbPeErLANL20201125_Med1
{txt}
{com}. order DDAbPeErLANL20201129_Med1
{txt}
{com}. order DDAbPeErLANL20201202_Med1
{txt}
{com}. order DDAbPeErLANL20201206_Med1
{txt}
{com}. order DDAbPeErLANL20201209_Med1
{txt}
{com}. order DDAbPeErLANL20201213_Med1
{txt}
{com}. order DDAbPeErLANL20201216_Med1
{txt}
{com}. order DDAbPeErLANL20201220_Med1
{txt}
{com}. order DDAbPeErLANL20201223_Med1
{txt}
{com}. order DDAbPeErLANL20210103_Med1
{txt}
{com}. order DDAbPeErLANL20210105_Med1
{txt}
{com}. order DDAbPeErLANL20210110_Med1
{txt}
{com}. order DDAbPeErLANL20210113_Med1
{txt}
{com}. order DDAbPeErLANL20210117_Med1
{txt}
{com}. order DDAbPeErLANL20210120_Med1
{txt}
{com}. order DDAbPeErLANL20210124_Med1
{txt}
{com}. order DDAbPeErLANL20210127_Med1
{txt}
{com}. order DDAbPeErLANL20210131_Med1
{txt}
{com}. order DDAbPeErLANL20210203_Med1
{txt}
{com}. order DDAbPeErLANL20210207_Med1
{txt}
{com}. order DDAbPeErLANL20210210_Med1
{txt}
{com}. order DDAbPeErLANL20210214_Med1
{txt}
{com}. order DDAbPeErLANL20210217_Med1
{txt}
{com}. order DDAbPeErLANL20210221_Med1
{txt}
{com}. order DDAbPeErLANL20210224_Med1
{txt}
{com}. order DDAbPeErLANL20210228_Med1
{txt}
{com}. order DDAbPeErLANL20210303_Med1
{txt}
{com}. order DDAbPeErLANL20210307_Med1
{txt}
{com}. order DDAbPeErLANL20210310_Med1
{txt}
{com}. order DDAbPeErLANL20210314_Med1
{txt}
{com}. order DDAbPeErLANL20210321_Med1
{txt}
{com}. order DDAbPeErLANL20210324_Med1
{txt}
{com}. order DDAbPeErLANL20210328_Med1
{txt}
{com}. order DDAbPeErLANL20210331_Med1
{txt}
{com}. order DDAbPeErLANL20210404_Med1
{txt}
{com}. order DDAbPeErLANL20210407_Med1
{txt}
{com}. order DDAbPeErLANL20210411_Med1
{txt}
{com}. order DDAbPeErLANL20210414_Med1
{txt}
{com}. order DDAbPeErLANL20210418_Med1
{txt}
{com}. order DDAbPeErLANL20210421_Med1
{txt}
{com}. order DDAbPeErLANL20210425_Med1
{txt}
{com}. order DDAbPeErLANL20210428_Med1
{txt}
{com}. order DDAbPeErLANL20210502_Med1
{txt}
{com}. order DDAbPeErLANL20210505_Med1
{txt}
{com}. order DDAbPeErLANL20210509_Med1
{txt}
{com}. order DDAbPeErLANL20210512_Med1
{txt}
{com}. order DDAbPeErLANL20210516_Med1
{txt}
{com}. order DDAbPeErLANL20210519_Med1
{txt}
{com}. order DDAbPeErLANL20210523_Med1
{txt}
{com}. order DDAbPeErLANL20210526_Med1
{txt}
{com}. order DDAbPeErLANL20210602_Med1
{txt}
{com}. order DDAbPeErLANL20210606_Med1
{txt}
{com}. order DDAbPeErLANL20210613_Med1
{txt}
{com}. order DDAbPeErLANL20210620_Med1
{txt}
{com}. order DDAbPeErLANL20210627_Med1
{txt}
{com}. order DDAbPeErLANL20210704_Med1
{txt}
{com}. order DDAbPeErLANL20210711_Med1
{txt}
{com}. order DDAbPeErLANL20210718_Med1
{txt}
{com}. order DDAbPeErLANL20210725_Med1
{txt}
{com}. order DDAbPeErLANL20210801_Med1
{txt}
{com}. order DDAbPeErLANL20210808_Med1
{txt}
{com}. order DDAbPeErLANL20210815_Med1
{txt}
{com}. order DDAbPeErLANL20210822_Med1
{txt}
{com}. order DDAbPeErLANL20210829_Med1
{txt}
{com}. order DDAbPeErLANL20210905_Med1
{txt}
{com}. order DDAbPeErLANL20210912_Med1
{txt}
{com}. order DDAbPeErLANL20210919_Med1
{txt}
{com}. order DDAbPeErLANL20210926_Med1
{txt}
{com}. 
. 
. capture drop DDAbPeErLANL_Mean1 // "DDAbPeErLANL mean over updates of median absolute % error by calendar months"
{txt}
{com}. egen DDAbPeErLANL_Mean1 = rowmean(DDAbPeErLANL20210926_Med1-DDAbPeErLANL20200830_Med1) // <<-- modify 11
{txt}(685 missing values generated)

{com}. label var DDAbPeErLANL_Mean1 "DDAbPeErLANL mean over updates of median absolute % error by calendar months"
{txt}
{com}. qui replace DDAbPeErLANL_Mean1 = . if DayDeaMeSmJOHN == . // before location was added to the estimates for the country
{txt}
{com}. qui replace DDAbPeErLANL_Mean1 = . if date == td(01jan2023) // 01jan2023 is not included in this study
{txt}
{com}. qui replace DDAbPeErLANL_Mean1 = . if date < td(30aug2020) // 30aug2020 is the earliest date of LANL forecasts for Jamaica
{txt}
{com}. 
.  
.  
.  
.  
.  
.  
. 
. 
. 
. 
. * (4) gen AVERAGE over calendar months of _Mean1  = _Mean2
. 
. * Wait note: wait ...
. 
.                 
. egen DDErrorLANL_Mean2 = mean(DDErrorLANL_Mean1) // get mean for all calendar months of _Mean1
{txt}
{com}. label var DDErrorLANL_Mean2 "DDErrorLANL Mean over calendar months of median error over updates"
{txt}
{com}. 
. egen DDAbsErrLANL_Mean2 = mean(DDAbsErrLANL_Mean1) // get mean for all calendar months of _Mean1
{txt}
{com}. label var DDAbsErrLANL_Mean2 "DDAbsErrLANL Mean over calendar months of median absolute error over updates"
{txt}
{com}. 
. egen DDPerErrLANL_Mean2 = mean(DDPerErrLANL_Mean1) // get mean for all calendar months of _Mean1
{txt}
{com}. label var DDPerErrLANL_Mean2 "DDPerErrLANL Mean over calendar months of median % error over updates"
{txt}
{com}. 
. egen DDAbPeErLANL_Mean2 = mean(DDAbPeErLANL_Mean1) // get mean for all calendar months of _Mean1
{txt}
{com}. label var DDAbPeErLANL_Mean2 "DDAbPeErLANL Mean over calendar months of median absolute % error over updates"
{txt}
{com}. 
. 
. 
. 
. 
. drop if date < td(01jan2020)
{txt}(0 observations deleted)

{com}. 
. drop if date > td(01jan2023)
{txt}(67 observations deleted)

{com}. 
. 
. qui compress
{txt}
{com}. 
. 
. 
. 
. ******
. * graph 03 Daily deaths, Error // <<-- modify 12
. 
. twoway ///
> (line DDErrorLANL20200830 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20200902 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20200906 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20200909 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20200913 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20200916 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20200920 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20200923 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20200927 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20200930 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20201004 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20201007 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20201011 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20201014 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20201018 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20201021 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20201025 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20201028 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20201101 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20201104 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20201108 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20201111 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20201115 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20201118 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20201122 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20201125 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20201129 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20201202 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20201206 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20201209 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20201213 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20201216 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20201220 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20201223 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210103 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210105 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210110 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210113 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210117 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210120 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210124 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210127 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210131 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210203 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210207 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210210 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210214 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210217 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210221 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210224 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210228 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210303 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210307 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210310 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210314 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210321 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210324 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210328 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210331 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210404 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210407 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210411 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210414 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210418 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210421 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210425 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210428 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210502 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210505 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210509 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210512 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210516 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210519 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210523 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210526 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210602 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210606 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210613 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210620 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210627 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210704 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210711 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210718 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210725 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210801 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210808 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210815 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210822 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210829 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210905 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210912 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210919 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDErrorLANL20210926 date, sort lcolor(brown) lwidth(thin)) ///
> if date >= td(01jan2020) & date <= td(01jan2023) ///
> , xtitle(Date) xlabel(#12, format(%tdYY-NN-DD) labsize(small)) xlabel(, grid) xlabel(, grid) ///
> xlabel(, angle(forty_five)) ylabel(, labsize(small) angle(forty_five) format(%30.0fc)) ///
> ytitle(Daily deaths error measure) title("C19 daily deaths error", size(medium) color(black)) /// 
> xscale(lwidth(vthin) lcolor(gray*.2)) yscale(lwidth(vthin) lcolor(gray*.2)) legend(off) yscale(titlegap(3)) ///
> subtitle("Jamaica, LANL, all updates, forecast only", size(small)) 
{res}{txt}
{com}. 
. qui graph export "graph 03 Jamaica LANL C19 daily deaths error.pdf", replace
{txt}
{com}. 
. 
. 
. 
. 
. ******
. * graph 04 Daily deaths, Absolute Error // <<-- modify 13
. 
. twoway ///
> (line DDAbsErrLANL20200830 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20200902 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20200906 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20200909 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20200913 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20200916 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20200920 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20200923 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20200927 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20200930 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20201004 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20201007 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20201011 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20201014 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20201018 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20201021 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20201025 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20201028 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20201101 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20201104 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20201108 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20201111 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20201115 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20201118 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20201122 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20201125 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20201129 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20201202 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20201206 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20201209 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20201213 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20201216 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20201220 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20201223 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210103 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210105 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210110 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210113 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210117 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210120 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210124 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210127 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210131 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210203 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210207 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210210 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210214 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210217 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210221 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210224 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210228 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210303 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210307 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210310 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210314 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210321 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210324 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210328 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210331 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210404 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210407 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210411 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210414 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210418 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210421 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210425 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210428 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210502 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210505 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210509 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210512 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210516 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210519 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210523 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210526 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210602 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210606 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210613 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210620 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210627 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210704 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210711 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210718 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210725 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210801 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210808 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210815 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210822 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210829 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210905 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210912 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210919 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbsErrLANL20210926 date, sort lcolor(brown) lwidth(thin)) ///
> if date >= td(01jan2020) & date <= td(01jan2023) ///
> , xtitle(Date) xlabel(#12, format(%tdYY-NN-DD) labsize(small)) xlabel(, grid) xlabel(, grid) ///
> xlabel(, angle(forty_five)) ylabel(, labsize(small) angle(forty_five) format(%30.0fc)) ///
> ytitle(Daily deaths error measure) title("C19 daily deaths absolute error", size(medium) color(black)) /// 
> xscale(lwidth(vthin) lcolor(gray*.2)) yscale(lwidth(vthin) lcolor(gray*.2)) legend(off) yscale(titlegap(3)) ///
> subtitle("Jamaica, LANL, all updates, forecast only", size(small))
{res}{txt}
{com}. 
. qui graph export "graph 04 Jamaica LANL C19 daily deaths absolute error.pdf", replace
{txt}
{com}. 
. 
. 
. 
. 
. 
. 
. 
. ******
. * graph 05 Daily deaths, Percent Error <<-- modify 14
. 
. twoway ///
> (line DDPerErrLANL20200830 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20200902 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20200906 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20200909 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20200913 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20200916 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20200920 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20200923 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20200927 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20200930 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20201004 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20201007 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20201011 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20201014 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20201018 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20201021 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20201025 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20201028 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20201101 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20201104 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20201108 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20201111 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20201115 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20201118 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20201122 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20201125 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20201129 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20201202 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20201206 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20201209 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20201213 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20201216 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20201220 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20201223 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210103 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210105 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210110 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210113 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210117 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210120 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210124 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210127 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210131 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210203 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210207 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210210 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210214 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210217 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210221 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210224 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210228 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210303 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210307 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210310 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210314 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210321 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210324 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210328 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210331 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210404 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210407 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210411 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210414 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210418 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210421 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210425 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210428 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210502 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210505 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210509 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210512 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210516 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210519 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210523 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210526 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210602 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210606 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210613 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210620 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210627 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210704 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210711 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210718 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210725 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210801 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210808 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210815 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210822 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210829 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210905 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210912 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210919 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDPerErrLANL20210926 date, sort lcolor(brown) lwidth(thin)) ///
> if date >= td(01jan2020) & date <= td(01jan2023) ///
> , xtitle(Date) xlabel(#12, format(%tdYY-NN-DD) labsize(small)) xlabel(, grid) xlabel(, grid) ///
> xlabel(, angle(forty_five)) ylabel(, labsize(small) angle(forty_five) format(%30.0fc)) ///
> ytitle(Daily deaths error measure) title("C19 daily deaths percent error", size(medium) color(black)) /// 
> xscale(lwidth(vthin) lcolor(gray*.2)) yscale(lwidth(vthin) lcolor(gray*.2)) legend(off) yscale(titlegap(3)) ///
> subtitle("Jamaica, LANL, all updates, forecast only", size(small))
{res}{txt}
{com}. 
. qui graph export "graph 05 Jamaica LANL C19 daily deaths percent error.pdf", replace
{txt}
{com}. 
. 
. 
. 
. 
. 
. 
. 
. ******
. * graph 06 Daily deaths, Absolute Percent Error // <<-- modify 15
. 
. * LANL lcolor brown // <<-- modify 16
. 
. twoway ///
> (line DDAbPeErLANL20200830 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20200902 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20200906 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20200909 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20200913 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20200916 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20200920 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20200923 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20200927 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20200930 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20201004 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20201007 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20201011 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20201014 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20201018 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20201021 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20201025 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20201028 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20201101 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20201104 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20201108 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20201111 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20201115 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20201118 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20201122 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20201125 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20201129 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20201202 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20201206 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20201209 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20201213 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20201216 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20201220 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20201223 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210103 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210105 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210110 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210113 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210117 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210120 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210124 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210127 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210131 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210203 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210207 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210210 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210214 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210217 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210221 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210224 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210228 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210303 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210307 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210310 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210314 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210321 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210324 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210328 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210331 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210404 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210407 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210411 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210414 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210418 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210421 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210425 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210428 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210502 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210505 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210509 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210512 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210516 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210519 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210523 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210526 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210602 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210606 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210613 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210620 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210627 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210704 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210711 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210718 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210725 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210801 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210808 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210815 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210822 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210829 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210905 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210912 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210919 date, sort lcolor(brown) lwidth(thin)) ///
> (line DDAbPeErLANL20210926 date, sort lcolor(brown) lwidth(thin)) ///
> if date >= td(01jan2020) & date <= td(01jan2023) ///
> , xtitle(Date) xlabel(#12, format(%tdYY-NN-DD) labsize(small)) xlabel(, grid) xlabel(, grid) ///
> xlabel(, angle(forty_five)) ylabel(, labsize(small) angle(forty_five) format(%30.0fc)) ///
> ytitle(Daily deaths error measure) title("C19 daily deaths absolute percent error", size(medium) color(black)) /// 
> xscale(lwidth(vthin) lcolor(gray*.2)) yscale(lwidth(vthin) lcolor(gray*.2)) legend(off) yscale(titlegap(3)) ///
> subtitle("Jamaica, LANL, all updates, forecast only", size(small))
{res}{txt}
{com}. 
. qui graph export "graph 06 Jamaica LANL C19 daily deaths absolute percent error.pdf", replace
{txt}
{com}. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. ***************************************************************
. * graph 07 Daily deaths, average median error 
. 
. twoway ///
> (line DDErrorLANL_Mean1 date, sort lcolor(brown) lwidth(medium)) /// 
> if date >= td(01jan2020) & date <= td(01jan2023) ///
> , xtitle(Date) xlabel(#12, format(%tdYY-NN-DD) labsize(small)) xlabel(, grid) xlabel(, grid) ///
> xlabel(, angle(forty_five)) ylabel(, labsize(small) angle(forty_five) format(%30.0fc)) ///
> ytitle(Daily deaths error measure) title("C19 daily deaths, average median error", size(medium) color(black)) /// 
> subtitle("Jamaica, LANL, forecast only", size(small)) xscale(lwidth(vthin) lcolor(gray*.2)) yscale(lwidth(vthin) lcolor(gray*.2)) ///
> xscale(lwidth(vthin) lcolor(gray*.2)) yscale(lwidth(vthin) lcolor(gray*.2)) legend(off) yscale(titlegap(3))
{res}{txt}
{com}. 
. qui graph export "graph 07 Jamaica LANL C19 daily deaths average median error.pdf", replace
{txt}
{com}. 
. 
. 
. 
. 
. *********************
. * smooth median error for better viewing 
. 
. tsset date, daily   
{res}
{p 0 15 2}{txt:Time variable: }{res:date}{txt:, }{res:{bind:22Jan2020}}{txt: to }{res:{bind:01Jan2023}}{p_end}
{txt}{col 9}Delta: {res}1 day
{txt}
{com}. 
. tssmooth ma DDErrorLANL_Mean1_window = DDErrorLANL_Mean1, window(3 1 3)
{txt}The smoother applied was
{res}{p 5 5 5}(1/7)*[x(t-3) + x(t-2) + x(t-1) + 1*x(t) + x(t+1) + x(t+2) + x(t+3)]; x(t)= DDErrorLANL_Mean1{p_end}
{txt}
{com}. 
. tssmooth ma DDErrorLANL_Mean1_sm = DDErrorLANL_Mean1_window, weights( 1 2 3 <4> 3 2 1) replace
{txt}The smoother applied was
{res}{p 5 5 5}(1/16)*[1*x(t-3) + 2*x(t-2) + 3*x(t-1) + 4*x(t) + 3*x(t+1) + 2*x(t+2) + ...; x(t)= DDErrorLANL_Mean1_window
{txt}
{smcl}
{com}. 
. label var DDErrorLANL_Mean1_sm "Daily deaths LANL average median error smooth"
{txt}
{com}. 
. drop *_window
{txt}
{com}. 
. // tsset, clear
. 
. *
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. ***************************************************************
. * graph 08 Daily deaths, average median absolute error 
. 
. twoway ///
> (line DDAbsErrLANL_Mean1 date, sort lcolor(brown) lwidth(medium)) /// 
> if date >= td(01jan2020) & date <= td(01jan2023) ///
> , xtitle(Date) xlabel(#12, format(%tdYY-NN-DD) labsize(small)) xlabel(, grid) xlabel(, grid) ///
> xlabel(, angle(forty_five)) ylabel(, labsize(small) angle(forty_five) format(%30.0fc)) ///
> ytitle(Daily deaths error measure) title("C19 daily deaths, average median absolute error", size(medium) color(black)) /// 
> subtitle("Jamaica, LANL, forecast only", size(small)) xscale(lwidth(vthin) lcolor(gray*.2)) yscale(lwidth(vthin) lcolor(gray*.2)) ///
> xscale(lwidth(vthin) lcolor(gray*.2)) yscale(lwidth(vthin) lcolor(gray*.2)) legend(off) yscale(titlegap(3))
{res}{txt}
{com}. 
. qui graph export "graph 08 Jamaica LANL C19 daily deaths average median absolute error.pdf", replace
{txt}
{com}. 
. 
. 
. 
. 
. 
. *********************
. * smooth median absolute error for better viewing 
. 
. // tsset date, daily   
. 
. tssmooth ma DDAbsErrLANL_Mean1_window = DDAbsErrLANL_Mean1, window(3 1 3)
{txt}The smoother applied was
{res}{p 5 5 5}(1/7)*[x(t-3) + x(t-2) + x(t-1) + 1*x(t) + x(t+1) + x(t+2) + x(t+3)]; x(t)= DDAbsErrLANL_Mean1{p_end}
{txt}
{com}. 
. tssmooth ma DDAbsErrLANL_Mean1_sm = DDAbsErrLANL_Mean1_window, weights( 1 2 3 <4> 3 2 1) replace
{txt}The smoother applied was
{res}{p 5 5 5}(1/16)*[1*x(t-3) + 2*x(t-2) + 3*x(t-1) + 4*x(t) + 3*x(t+1) + 2*x(t+2) + ...; x(t)= DDAbsErrLANL_Mean1_window
{txt}
{smcl}
{com}. 
. label var DDAbsErrLANL_Mean1_sm "Daily deaths LANL average median absolute error smooth"
{txt}
{com}. 
. drop *_window
{txt}
{com}. 
. // tsset, clear
. 
. *
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. ***************************************************************
. * graph 09 Daily deaths, average median percent error 
. 
. twoway ///
> (line DDPerErrLANL_Mean1 date, sort lcolor(brown) lwidth(medium)) /// 
> if date >= td(01jan2020) & date <= td(01jan2023) ///
> , xtitle(Date) xlabel(#12, format(%tdYY-NN-DD) labsize(small)) xlabel(, grid) xlabel(, grid) ///
> xlabel(, angle(forty_five)) ylabel(, labsize(small) angle(forty_five) format(%30.0fc)) ///
> ytitle(Daily deaths error measure) title("C19 daily deaths, average median percent error", size(medium) color(black)) /// 
> subtitle("Jamaica, LANL, forecast only", size(small)) xscale(lwidth(vthin) lcolor(gray*.2)) yscale(lwidth(vthin) lcolor(gray*.2)) ///
> xscale(lwidth(vthin) lcolor(gray*.2)) yscale(lwidth(vthin) lcolor(gray*.2)) legend(off) yscale(titlegap(3))
{res}{txt}
{com}. 
. qui graph export "graph 09 Jamaica LANL C19 daily deaths average median percent error.pdf", replace
{txt}
{com}. 
. 
. 
. 
. 
. *********************
. * smooth median percent error for better viewing 
. 
. // tsset date, daily   
. 
. tssmooth ma DDPerErrLANL_Mean1_window = DDPerErrLANL_Mean1, window(3 1 3)
{txt}The smoother applied was
{res}{p 5 5 5}(1/7)*[x(t-3) + x(t-2) + x(t-1) + 1*x(t) + x(t+1) + x(t+2) + x(t+3)]; x(t)= DDPerErrLANL_Mean1{p_end}
{txt}
{com}. 
. tssmooth ma DDPerErrLANL_Mean1_sm = DDPerErrLANL_Mean1_window, weights( 1 2 3 <4> 3 2 1) replace
{txt}The smoother applied was
{res}{p 5 5 5}(1/16)*[1*x(t-3) + 2*x(t-2) + 3*x(t-1) + 4*x(t) + 3*x(t+1) + 2*x(t+2) + ...; x(t)= DDPerErrLANL_Mean1_window
{txt}
{smcl}
{com}. 
. label var DDPerErrLANL_Mean1_sm "Daily deaths LANL average median percent error smooth"
{txt}
{com}. 
. drop *_window
{txt}
{com}. 
. // tsset, clear
. 
. *
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. ***************************************************************
. * graph 10 Daily deaths, average median absolute percent error
. 
. twoway ///
> (line DDAbPeErLANL_Mean1 date, sort lcolor(brown) lwidth(medium)) /// 
> if date >= td(01jan2020) & date <= td(01jan2023) ///
> , xtitle(Date) xlabel(#12, format(%tdYY-NN-DD) labsize(small)) xlabel(, grid) xlabel(, grid) ///
> xlabel(, angle(forty_five)) ylabel(, labsize(small) angle(forty_five) format(%30.0fc)) ///
> ytitle(Daily deaths error measure) title("C19 daily deaths, average median absolute percent error", size(medium) color(black)) /// 
> subtitle("Jamaica, LANL, forecast only", size(small)) xscale(lwidth(vthin) lcolor(gray*.2)) yscale(lwidth(vthin) lcolor(gray*.2)) ///
> xscale(lwidth(vthin) lcolor(gray*.2)) yscale(lwidth(vthin) lcolor(gray*.2)) legend(off) yscale(titlegap(3))
{res}{txt}
{com}. 
. qui graph export "graph 10 Jamaica LANL C19 daily deaths average median absolute percent error.pdf", replace
{txt}
{com}. 
. 
. 
. 
. 
. *********************
. * smooth median absolute % error for better viewing 
. 
. // tsset date, daily   
. 
. tssmooth ma DDAbPeErLANL_Mean1_window = DDAbPeErLANL_Mean1, window(3 1 3)
{txt}The smoother applied was
{res}{p 5 5 5}(1/7)*[x(t-3) + x(t-2) + x(t-1) + 1*x(t) + x(t+1) + x(t+2) + x(t+3)]; x(t)= DDAbPeErLANL_Mean1{p_end}
{txt}
{com}. 
. tssmooth ma DDAbPeErLANL_Mean1_sm = DDAbPeErLANL_Mean1_window, weights( 1 2 3 <4> 3 2 1) replace
{txt}The smoother applied was
{res}{p 5 5 5}(1/16)*[1*x(t-3) + 2*x(t-2) + 3*x(t-1) + 4*x(t) + 3*x(t+1) + 2*x(t+2) + ...; x(t)= DDAbPeErLANL_Mean1_window
{txt}
{smcl}
{com}. 
. label var DDAbPeErLANL_Mean1_sm "Daily deaths LANL average median absolute percent error smooth"
{txt}
{com}. 
. drop *_window
{txt}
{com}. 
. tsset, clear
{txt}
{com}. 
. *
. 
. 
. 
. 
. 
. ***********************************************
. 
. capture drop *2str
{txt}
{com}. 
. summ DDAbPeErLANL_Mean2, meanonly
{txt}
{com}. 
. local DDAbPeErLANL_Mean2str = string(r(mean),"%8.1f")
{txt}
{com}. 
. gen DDAbPeErLANL_Mean2str = `DDAbPeErLANL_Mean2str'
{txt}
{com}.     
. 
. * graph 11 Daily deaths, Average MAPE over updates and calendar months
. 
. graph bar ///
> (mean) DDAbPeErLANL_Mean2str /// 
> , bar(1, fcolor(brown) lcolor(brown)) ///
> blabel(bar, format(%30.0fc)) ytitle("Average MAPE") yscale(titlegap(2)) ///
> title("C19 daily deaths average MAPE over updates and calendar months", size(medium) color(black)) ///
> subtitle("Jamaica, LANL, forecast only. MAPE: Median Absolute Percent Error", size(small)) /// 
> legend(off) ylabel(, labsize(small) angle(forty_five) format(%30.0fc))
{res}{txt}
{com}. 
. qui graph export "graph 11 Jamaica LANL C19 daily deaths Average MAPE over updates and calendar months.pdf", replace
{txt}
{com}. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. ******
. 
. qui compress 
{txt}
{com}. 
. save "LANL Jamaica error.dta", replace 
{txt}{p 0 4 2}
file {bf}
LANL Jamaica error.dta{rm}
saved
{p_end}

{com}. 
. 
. 
. ******
. 
. * create data dictionary
. 
. preserve
{txt}
{com}. 
.     describe, replace
{res}{txt}
{com}.         
.     export delimited name varlab using "LANL Jamaica error data dictionary.csv", replace 
{res}{txt}file {bf:LANL Jamaica error data dictionary.csv} saved

{com}.         
. restore
{txt}
{com}. 
. 
. 
. view "log CovidLongitudinal Jamaica 5 LANL.smcl"
{txt}
{com}. 
. log close
      {txt}name:  {res}<unnamed>
       {txt}log:  {res}/Users/farshadpourmalek/Downloads/CovidLongitudinal-main/code/countries/Jamaica/log CovidLongitudinal Jamaica 5 LANL.smcl
  {txt}log type:  {res}smcl
 {txt}closed on:  {res}15 Aug 2023, 06:06:09
{txt}{.-}
{smcl}
{txt}{sf}{ul off}